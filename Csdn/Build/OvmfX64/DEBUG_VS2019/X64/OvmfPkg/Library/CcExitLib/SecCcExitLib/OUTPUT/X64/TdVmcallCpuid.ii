#line 1 "D:\\uefi_specs_personal_collections\\edk2\\OvmfPkg\\Library\\CcExitLib\\X64\\TdVmcallCpuid.nasm"
#line 1 "d:\\uefi_specs_personal_collections\\csdn\\Build\\OvmfX64\\DEBUG_VS2019\\X64\\OvmfPkg\\Library\\CcExitLib\\SecCcExitLib\\DEBUG\\AutoGen.h"















#line 1 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"




















#line 1 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"




















  #pragma pack()
#line 23 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"


























#line 50 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"











  #pragma warning ( disable : 4214 )




  #pragma warning ( disable : 4100 )





  #pragma warning ( disable : 4057 )




  #pragma warning ( disable : 4127 )




  #pragma warning ( disable : 4505 )




  #pragma warning ( disable : 4206 )

  





    #pragma warning ( disable : 4701 )





    #pragma warning ( disable : 4703 )

  #line 104 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"

#line 106 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"









typedef unsigned __int64 UINT64;



typedef __int64 INT64;



typedef unsigned __int32 UINT32;



typedef __int32 INT32;



typedef unsigned short UINT16;




typedef unsigned short CHAR16;



typedef short INT16;




typedef unsigned char BOOLEAN;



typedef unsigned char UINT8;



typedef char CHAR8;



typedef signed char INT8;















































#line 206 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"





typedef UINT64 UINTN;




typedef INT64 INTN;












































































#line 294 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"







#line 302 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"















#line 318 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"

#line 320 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"
#line 22 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"





  #pragma warning ( disable : 4200 )
#line 29 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"













#line 43 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"






#line 50 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"






  













#line 71 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"

  





  #line 79 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"
#line 80 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"







  






#line 95 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"






  






#line 109 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"
#line 110 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"






  









  





  #line 133 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"
#line 134 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"








  









  





  #line 159 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"
#line 160 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"






  





#line 173 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"





  #line 179 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"
#line 180 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"

























#line 206 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"







typedef struct {
  UINT32    Data1;
  UINT16    Data2;
  UINT16    Data3;
  UINT8     Data4[8];
} GUID;




typedef struct {
  UINT8    Addr[4];
} IPv4_ADDRESS;




typedef struct {
  UINT8    Addr[16];
} IPv6_ADDRESS;




typedef UINT64 PHYSICAL_ADDRESS;




typedef struct _LIST_ENTRY LIST_ENTRY;




struct _LIST_ENTRY {
  LIST_ENTRY    *ForwardLink;
  LIST_ENTRY    *BackLink;
};



































































#line 319 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"

#line 321 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"
















































































































































































































































































#line 594 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"












































#line 639 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"




typedef CHAR8 *VA_LIST;






























































#line 707 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"




typedef UINTN *BASE_LIST;











































#line 756 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"



#line 760 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"













#line 774 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"



















#line 794 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"















#line 810 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"






static_assert (sizeof (BOOLEAN) == 1, "sizeof (BOOLEAN) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (INT8)    == 1, "sizeof (INT8) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (UINT8)   == 1, "sizeof (UINT8) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (INT16)   == 2, "sizeof (INT16) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (UINT16)  == 2, "sizeof (UINT16) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (INT32)   == 4, "sizeof (INT32) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (UINT32)  == 4, "sizeof (UINT32) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (INT64)   == 8, "sizeof (INT64) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (UINT64)  == 8, "sizeof (UINT64) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (CHAR8)   == 1, "sizeof (CHAR8) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (CHAR16)  == 2, "sizeof (CHAR16) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (L'A')    == 2, "sizeof (L'A') does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (L"A")    == 4, "sizeof (L\"A\") does not meet UEFI Specification Data Type requirements");

static_assert (_Alignof (BOOLEAN) == sizeof (BOOLEAN), "Alignment of BOOLEAN does not meet UEFI Specification Data Type requirements");
static_assert (_Alignof (INT8)    == sizeof (INT8), "Alignment of INT8 does not meet UEFI Specification Data Type requirements");
static_assert (_Alignof (UINT8)   == sizeof (UINT8), "Alignment of INT16 does not meet UEFI Specification Data Type requirements");
static_assert (_Alignof (INT16)   == sizeof (INT16), "Alignment of INT16 does not meet UEFI Specification Data Type requirements");
static_assert (_Alignof (UINT16)  == sizeof (UINT16), "Alignment of UINT16 does not meet UEFI Specification Data Type requirements");
static_assert (_Alignof (INT32)   == sizeof (INT32), "Alignment of INT32 does not meet UEFI Specification Data Type requirements");
static_assert (_Alignof (UINT32)  == sizeof (UINT32), "Alignment of UINT32 does not meet UEFI Specification Data Type requirements");
static_assert (_Alignof (INT64)   == sizeof (INT64), "Alignment of INT64 does not meet UEFI Specification Data Type requirements");
static_assert (_Alignof (UINT64)  == sizeof (UINT64), "Alignment of UINT64 does not meet UEFI Specification Data Type requirements");
static_assert (_Alignof (CHAR8)   == sizeof (CHAR8), "Alignment of CHAR8 does not meet UEFI Specification Data Type requirements");
static_assert (_Alignof (CHAR16)  == sizeof (CHAR16), "Alignment of CHAR16 does not meet UEFI Specification Data Type requirements");
static_assert (_Alignof (INTN)    == sizeof (INTN), "Alignment of INTN does not meet UEFI Specification Data Type requirements");
static_assert (_Alignof (UINTN)   == sizeof (UINTN), "Alignment of UINTN does not meet UEFI Specification Data Type requirements");
static_assert (_Alignof (void *)  == sizeof (void *), "Alignment of VOID * does not meet UEFI Specification Data Type requirements");








typedef enum {
  __VerifyUint8EnumValue = 0xff
} __VERIFY_UINT8_ENUM_SIZE;

typedef enum {
  __VerifyUint16EnumValue = 0xffff
} __VERIFY_UINT16_ENUM_SIZE;

typedef enum {
  __VerifyInt32EnumValue = 0x7fffffff
} __VERIFY_INT32_ENUM_SIZE;

static_assert (sizeof (__VERIFY_UINT8_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (__VERIFY_UINT16_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (__VERIFY_INT32_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");

static_assert (_Alignof (__VERIFY_UINT8_ENUM_SIZE)  == sizeof (__VERIFY_UINT8_ENUM_SIZE), "Alignment of enum does not meet UEFI Specification Data Type requirements");
static_assert (_Alignof (__VERIFY_UINT16_ENUM_SIZE) == sizeof (__VERIFY_UINT16_ENUM_SIZE), "Alignment of enum does not meet UEFI Specification Data Type requirements");
static_assert (_Alignof (__VERIFY_INT32_ENUM_SIZE) == sizeof (__VERIFY_INT32_ENUM_SIZE), "Alignment of enum does not meet UEFI Specification Data Type requirements");



























































































































































typedef UINTN RETURN_STATUS;




















































































































































































































































































































void *
_ReturnAddress (
  void
  );

  #pragma intrinsic(_ReturnAddress)







































#line 1381 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"














#line 1396 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"
#line 17 "d:\\uefi_specs_personal_collections\\csdn\\Build\\OvmfX64\\DEBUG_VS2019\\X64\\OvmfPkg\\Library\\CcExitLib\\SecCcExitLib\\DEBUG\\AutoGen.h"
#line 1 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Library/PcdLib.h"








































































































































































































































































































































































































































































































































































































































































































































































































































UINTN
__cdecl
LibPcdSetSku (
   UINTN  SkuId
  );











UINT8
__cdecl
LibPcdGet8 (
   UINTN  TokenNumber
  );











UINT16
__cdecl
LibPcdGet16 (
   UINTN  TokenNumber
  );











UINT32
__cdecl
LibPcdGet32 (
   UINTN  TokenNumber
  );











UINT64
__cdecl
LibPcdGet64 (
   UINTN  TokenNumber
  );











void *
__cdecl
LibPcdGetPtr (
   UINTN  TokenNumber
  );











BOOLEAN
__cdecl
LibPcdGetBool (
   UINTN  TokenNumber
  );









UINTN
__cdecl
LibPcdGetSize (
   UINTN  TokenNumber
  );















UINT8
__cdecl
LibPcdGetEx8 (
   const GUID  *Guid,
   UINTN       TokenNumber
  );















UINT16
__cdecl
LibPcdGetEx16 (
   const GUID  *Guid,
   UINTN       TokenNumber
  );












UINT32
__cdecl
LibPcdGetEx32 (
   const GUID  *Guid,
   UINTN       TokenNumber
  );















UINT64
__cdecl
LibPcdGetEx64 (
   const GUID  *Guid,
   UINTN       TokenNumber
  );















void *
__cdecl
LibPcdGetExPtr (
   const GUID  *Guid,
   UINTN       TokenNumber
  );















BOOLEAN
__cdecl
LibPcdGetExBool (
   const GUID  *Guid,
   UINTN       TokenNumber
  );















UINTN
__cdecl
LibPcdGetExSize (
   const GUID  *Guid,
   UINTN       TokenNumber
  );













RETURN_STATUS
__cdecl
LibPcdSet8S (
   UINTN  TokenNumber,
   UINT8  Value
  );













RETURN_STATUS
__cdecl
LibPcdSet16S (
   UINTN   TokenNumber,
   UINT16  Value
  );













RETURN_STATUS
__cdecl
LibPcdSet32S (
   UINTN   TokenNumber,
   UINT32  Value
  );













RETURN_STATUS
__cdecl
LibPcdSet64S (
   UINTN   TokenNumber,
   UINT64  Value
  );























RETURN_STATUS
__cdecl
LibPcdSetPtrS (
         UINTN  TokenNumber,
      UINTN  *SizeOfBuffer,
   const void   *Buffer
  );













RETURN_STATUS
__cdecl
LibPcdSetBoolS (
   UINTN    TokenNumber,
   BOOLEAN  Value
  );

















RETURN_STATUS
__cdecl
LibPcdSetEx8S (
   const GUID  *Guid,
   UINTN       TokenNumber,
   UINT8       Value
  );

















RETURN_STATUS
__cdecl
LibPcdSetEx16S (
   const GUID  *Guid,
   UINTN       TokenNumber,
   UINT16      Value
  );

















RETURN_STATUS
__cdecl
LibPcdSetEx32S (
   const GUID  *Guid,
   UINTN       TokenNumber,
   UINT32      Value
  );

















RETURN_STATUS
__cdecl
LibPcdSetEx64S (
   const GUID  *Guid,
   UINTN       TokenNumber,
   UINT64      Value
  );























RETURN_STATUS
__cdecl
LibPcdSetExPtrS (
   const GUID   *Guid,
         UINTN  TokenNumber,
      UINTN  *SizeOfBuffer,
         void   *Buffer
  );

















RETURN_STATUS
__cdecl
LibPcdSetExBoolS (
   const GUID  *Guid,
   UINTN       TokenNumber,
   BOOLEAN     Value
  );

















typedef
void
(__cdecl *PCD_CALLBACK)(
          const GUID        *CallBackGuid  ,
          UINTN             CallBackToken,
       void              *TokenData,
          UINTN             TokenDataSize
  );

















void
__cdecl
LibPcdCallbackOnSet (
   const GUID    *Guid        ,
   UINTN         TokenNumber,
   PCD_CALLBACK  NotificationFunction
  );














void
__cdecl
LibPcdCancelCallback (
   const GUID    *Guid        ,
   UINTN         TokenNumber,
   PCD_CALLBACK  NotificationFunction
  );




















UINTN
__cdecl
LibPcdGetNextToken (
   const GUID  *Guid        ,
   UINTN       TokenNumber
  );














GUID *
__cdecl
LibPcdGetNextTokenSpace (
   const GUID  *TokenSpaceGuid
  );
























void *
__cdecl
LibPatchPcdSetPtr (
          void  *PatchVariable,
          UINTN  MaximumDatumSize,
       UINTN  *SizeOfBuffer,
   const  void   *Buffer
  );
























RETURN_STATUS
__cdecl
LibPatchPcdSetPtrS (
        void   *PatchVariable,
         UINTN  MaximumDatumSize,
      UINTN  *SizeOfBuffer,
   const void   *Buffer
  );


























void *
__cdecl
LibPatchPcdSetPtrAndSize (
         void   *PatchVariable,
         UINTN  *SizeOfPatchVariable,
          UINTN  MaximumDatumSize,
       UINTN  *SizeOfBuffer,
   const  void   *Buffer
  );


























RETURN_STATUS
__cdecl
LibPatchPcdSetPtrAndSizeS (
        void   *PatchVariable,
        UINTN  *SizeOfPatchVariable,
         UINTN  MaximumDatumSize,
      UINTN  *SizeOfBuffer,
   const void   *Buffer
  );

typedef enum {
  PCD_TYPE_8,
  PCD_TYPE_16,
  PCD_TYPE_32,
  PCD_TYPE_64,
  PCD_TYPE_BOOL,
  PCD_TYPE_PTR
} PCD_TYPE;

typedef struct {
  
  
  
  
  PCD_TYPE    PcdType;
  
  
  
  
  UINTN       PcdSize;
  
  
  
  
  
  
  CHAR8       *PcdName;
} PCD_INFO;













void
__cdecl
LibPcdGetInfo (
          UINTN     TokenNumber,
         PCD_INFO  *PcdInfo
  );














void
__cdecl
LibPcdGetInfoEx (
   const  GUID      *Guid,
          UINTN     TokenNumber,
         PCD_INFO  *PcdInfo
  );








UINTN
__cdecl
LibPcdGetSku (
  void
  );

#line 1677 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Library/PcdLib.h"
#line 18 "d:\\uefi_specs_personal_collections\\csdn\\Build\\OvmfX64\\DEBUG_VS2019\\X64\\OvmfPkg\\Library\\CcExitLib\\SecCcExitLib\\DEBUG\\AutoGen.h"

extern GUID  gEfiCallerIdGuid;
extern GUID  gEdkiiDscPlatformGuid;
extern CHAR8 *gEfiCallerBaseName;



extern GUID gUefiOvmfPkgTokenSpaceGuid;


extern UINT64 _gPcd_SkuId_Array[];



extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfSecGhcbBackupBase;






extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfSecGhcbBackupSize;






extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfCpuidBase;






extern const UINT32 _gPcd_FixedAtBuild_PcdOvmfCpuidSize;











#line 66 "d:\\uefi_specs_personal_collections\\csdn\\Build\\OvmfX64\\DEBUG_VS2019\\X64\\OvmfPkg\\Library\\CcExitLib\\SecCcExitLib\\DEBUG\\AutoGen.h"
#line 1 "D:\\uefi_specs_personal_collections\\edk2\\OvmfPkg\\Library\\CcExitLib\\X64\\TdVmcallCpuid.nasm"
;------------------------------------------------------------------------------
;*
;* Copyright (c) 2020 - 2021, Intel Corporation. All rights reserved.<BR>
;* SPDX-License-Identifier: BSD-2-Clause-Patent
;*
;*
;------------------------------------------------------------------------------

DEFAULT REL
SECTION .text

%define TDVMCALL_EXPOSE_REGS_MASK       0xffcc
%define TDVMCALL                        0x0
%define EXIT_REASON_CPUID               0xa

%macro tdcall 0
    db 0x66,0x0f,0x01,0xcc
%endmacro

%macro tdcall_push_regs 0
    push rbp
    mov  rbp, rsp
    push r15
    push r14
    push r13
    push r12
    push rbx
    push rsi
    push rdi
%endmacro

%macro tdcall_pop_regs 0
    pop rdi
    pop rsi
    pop rbx
    pop r12
    pop r13
    pop r14
    pop r15
    pop rbp
%endmacro

%define number_of_regs_pushed 8
%define number_of_parameters  4

;
; Keep these in sync for push_regs/pop_regs, code below
; uses them to find 5th or greater parameters
;
%define first_variable_on_stack_offset \
  ((number_of_regs_pushed * 8) + (number_of_parameters * 8) + 8)
%define second_variable_on_stack_offset \
  ((first_variable_on_stack_offset) + 8)

%macro tdcall_regs_preamble 2
    mov rax, %1

    xor rcx, rcx
    mov ecx, %2

    ; R10 = 0 (standard TDVMCALL)

    xor r10d, r10d

    ; Zero out unused (for standard TDVMCALL) registers to avoid leaking
    ; secrets to the VMM.

    xor ebx, ebx
    xor esi, esi
    xor edi, edi

    xor edx, edx
    xor ebp, ebp
    xor r8d, r8d
    xor r9d, r9d
    xor r14, r14
    xor r15, r15
%endmacro

%macro tdcall_regs_postamble 0
    xor ebx, ebx
    xor esi, esi
    xor edi, edi

    xor ecx, ecx
    xor edx, edx
    xor r8d,  r8d
    xor r9d,  r9d
    xor r10d, r10d
    xor r11d, r11d
%endmacro

;------------------------------------------------------------------------------
; 0   => RAX = TDCALL leaf / TDVMCALL
; M   => RCX = TDVMCALL register behavior
; 0xa => R11 = TDVMCALL function / CPUID
; RCX => R12 = p1
; RDX => R13 = p2
;
;  UINT64
;  __cdecl
;  TdVmCallCpuid (
;    UINT64  EaxIn,    
;    UINT64  EcxIn,    
;    UINT64  *Results  
;    )
global TdVmCallCpuid
TdVmCallCpuid:
       tdcall_push_regs

       mov r11, EXIT_REASON_CPUID
       mov r12, rcx
       mov r13, rdx

       ; Save *results pointers
       push r8

       tdcall_regs_preamble TDVMCALL, TDVMCALL_EXPOSE_REGS_MASK

       tdcall

       ; ignore return data if TDCALL reports failure.
       test rax, rax
       jnz .no_return_data

       ; Propagate TDVMCALL success/failure to return value.
       mov rax, r10
       test rax, rax
       jnz .no_return_data

       ; Retrieve *Results
       pop r8
       test r8, r8
       jz .no_return_data
       ; Caller pass in buffer so store results r12-r15 contains eax-edx
       mov [r8 +  0], r12
       mov [r8 +  8], r13
       mov [r8 + 16], r14
       mov [r8 + 24], r15

.no_return_data:
       tdcall_regs_postamble

       tdcall_pop_regs

       ret
