     1                                  ;------------------------------------------------------------------------------
     2                                  ; @file
     3                                  ; This file includes all other code files to assemble the reset vector code
     4                                  ;
     5                                  ; Copyright (c) 2008 - 2013, Intel Corporation. All rights reserved.<BR>
     6                                  ; Copyright (c) 2020 - 2024, Advanced Micro Devices, Inc. All rights reserved.<BR>
     7                                  ; SPDX-License-Identifier: BSD-2-Clause-Patent
     8                                  ;
     9                                  ;------------------------------------------------------------------------------
    10                                  
    11                                  ;
    12                                  ; If neither ARCH_IA32 nor ARCH_X64 are defined, then try to include
    13                                  ; Base.h to use the C pre-processor to determine the architecture.
    14                                  ;
    15                                  %ifndef ARCH_IA32
    16                                    %ifndef ARCH_X64
    17                                      
    18                                      
    19                                  
    20                                  
    21                                        %define ARCH_X64
    22                                  
    23                                    %endif
    24                                  %endif
    25                                  
    26                                  %ifdef ARCH_IA32
    27                                    %ifdef ARCH_X64
    28                                      %error "Only one of ARCH_IA32 or ARCH_X64 can be defined."
    29                                    %endif
    30                                  %elifdef ARCH_X64
    31                                  %else
    32                                    %error "Either ARCH_IA32 or ARCH_X64 must be defined."
    33                                  %endif
    34                                  
    35                                  %include "CommonMacros.inc"
     1                              <1> ;------------------------------------------------------------------------------
     2                              <1> ; @file
     3                              <1> ; Common macros used in the ResetVector VTF module.
     4                              <1> ;
     5                              <1> ; Copyright (c) 2008, Intel Corporation. All rights reserved.<BR>
     6                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
     7                              <1> ;
     8                              <1> ;------------------------------------------------------------------------------
     9                              <1> 
    10                              <1> %define ADDR16_OF(x) (0x10000 - fourGigabytes + x)
    11                              <1> %define ADDR_OF(x) (0x100000000 - fourGigabytes + x)
    12                              <1> 
    13                              <1> %macro  OneTimeCall 1
    14                              <1>     jmp     %1
    15                              <1> %1 %+ OneTimerCallReturn:
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro  OneTimeCallRet 1
    19                              <1>     jmp     %1 %+ OneTimerCallReturn
    20                              <1> %endmacro
    21                              <1> 
    22                              <1> StartOfResetVectorCode:
    23                              <1> 
    24                              <1> %define ADDR_OF_START_OF_RESET_CODE ADDR_OF(StartOfResetVectorCode)
    25                              <1> 
    36                                  
    37                                  %include "PostCodes.inc"
     1                              <1> ;------------------------------------------------------------------------------
     2                              <1> ; @file
     3                              <1> ; Definitions of POST CODES for the reset vector module
     4                              <1> ;
     5                              <1> ; Copyright (c) 2009, Intel Corporation. All rights reserved.<BR>
     6                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
     7                              <1> ;
     8                              <1> ;------------------------------------------------------------------------------
     9                              <1> 
    10                              <1> %define POSTCODE_16BIT_MODE     0x16
    11                              <1> %define POSTCODE_32BIT_MODE     0x32
    12                              <1> %define POSTCODE_64BIT_MODE     0x64
    13                              <1> 
    14                              <1> %define POSTCODE_BFV_NOT_FOUND  0xb0
    15                              <1> %define POSTCODE_BFV_FOUND      0xb1
    16                              <1> 
    17                              <1> %define POSTCODE_SEC_NOT_FOUND  0xf0
    18                              <1> %define POSTCODE_SEC_FOUND      0xf1
    19                              <1> 
    38                                  
    39                                  %ifdef DEBUG_PORT80
    40                                    %include "Port80Debug.asm"
    41                                  %elifdef DEBUG_SERIAL
    42                                    %include "SerialDebug.asm"
    43                                  %elif 0
    44                                  ; Set ^ this to 1 to enable postcodes on the qemu debug console.
    45                                  ; Disabled by default because it is incompatible with SEV-ES/SEV-SNP and TDX.
    46                                    %include "QemuDebugCon.asm"
    47                                  %else
    48                                    %include "DebugDisabled.asm"
     1                              <1> ;------------------------------------------------------------------------------
     2                              <1> ; @file
     3                              <1> ; Debug disabled
     4                              <1> ;
     5                              <1> ; Copyright (c) 2009, Intel Corporation. All rights reserved.<BR>
     6                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
     7                              <1> ;
     8                              <1> ;------------------------------------------------------------------------------
     9                              <1> 
    10                              <1> BITS    16
    11                              <1> 
    12                              <1> %macro  debugInitialize 0
    13                              <1>     ;
    14                              <1>     ; No initialization is required
    15                              <1>     ;
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro  debugShowPostCode 1
    19                              <1> %endmacro
    20                              <1> 
    49                                  %endif
    50                                  
    51                                  %include "Ia32/SearchForBfvBase.asm"
     1                              <1> ;------------------------------------------------------------------------------
     2                              <1> ; @file
     3                              <1> ; Search for the Boot Firmware Volume (BFV) base address
     4                              <1> ;
     5                              <1> ; Copyright (c) 2008 - 2022, Intel Corporation. All rights reserved.<BR>
     6                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
     7                              <1> ;
     8                              <1> ;------------------------------------------------------------------------------
     9                              <1> 
    10                              <1> ;#define EFI_FIRMWARE_FILE_SYSTEM2_GUID ;  { 0x8c8ce578, 0x8a3d, 0x4f1c, { 0x99, 0x35, 0x89, 0x61, 0x85, 0xc3, 0x2d, 0xd3 } }
    12                              <1> %define FFS2_GUID_DWORD0 0x8c8ce578
    13                              <1> %define FFS2_GUID_DWORD1 0x4f1c8a3d
    14                              <1> %define FFS2_GUID_DWORD2 0x61893599
    15                              <1> %define FFS2_GUID_DWORD3 0xd32dc385
    16                              <1> 
    17                              <1> ;#define EFI_FIRMWARE_FILE_SYSTEM3_GUID ;  { 0x8c8ce578, 0x3dcb, 0x4dca, { 0xbd, 0x6f, 0x1e, 0x96, 0x89, 0xe7, 0x34, 0x9a } }
    19                              <1> %define FFS3_GUID_DWORD0 0x5473c07a
    20                              <1> %define FFS3_GUID_DWORD1 0x4dca3dcb
    21                              <1> %define FFS3_GUID_DWORD2 0x961e6fbd
    22                              <1> %define FFS3_GUID_DWORD3 0x9a34e789
    23                              <1> 
    24                              <1> BITS    32
    25                              <1> 
    26                              <1> ;
    27                              <1> ; Modified:  EAX, EBX
    28                              <1> ; Preserved: EDI, ESP
    29                              <1> ;
    30                              <1> ; @param[out]  EBP  Address of Boot Firmware Volume (BFV)
    31                              <1> ;
    32                              <1> Flat32SearchForBfvBase:
    33                              <1> 
    34 00000000 31C0                <1>     xor     eax, eax
    35                              <1> searchingForBfvHeaderLoop:
    36                              <1>     ;
    37                              <1>     ; We check for a firmware volume at every 4KB address in the top 16MB
    38                              <1>     ; just below 4GB.  (Addresses at 0xffHHH000 where H is any hex digit.)
    39                              <1>     ;
    40 00000002 2D00100000          <1>     sub     eax, 0x1000
    41 00000007 3D000000FF          <1>     cmp     eax, 0xff000000
    42 0000000C 7259                <1>     jb      searchedForBfvHeaderButNotFound
    43                              <1> 
    44                              <1>     ;
    45                              <1>     ; Check FFS3 GUID
    46                              <1>     ;
    47 0000000E 8178107AC07354      <1>     cmp     dword [eax + 0x10], FFS3_GUID_DWORD0
    48 00000015 751D                <1>     jne     searchingForFfs2Guid
    49 00000017 817814CB3DCA4D      <1>     cmp     dword [eax + 0x14], FFS3_GUID_DWORD1
    50 0000001E 7514                <1>     jne     searchingForFfs2Guid
    51 00000020 817818BD6F1E96      <1>     cmp     dword [eax + 0x18], FFS3_GUID_DWORD2
    52 00000027 750B                <1>     jne     searchingForFfs2Guid
    53 00000029 81781C89E7349A      <1>     cmp     dword [eax + 0x1c], FFS3_GUID_DWORD3
    54 00000030 7502                <1>     jne     searchingForFfs2Guid
    55 00000032 EB24                <1>     jmp     checkingFvLength
    56                              <1> 
    57                              <1> searchingForFfs2Guid:
    58                              <1>     ;
    59                              <1>     ; Check FFS2 GUID
    60                              <1>     ;
    61 00000034 81781078E58C8C      <1>     cmp     dword [eax + 0x10], FFS2_GUID_DWORD0
    62 0000003B 75C5                <1>     jne     searchingForBfvHeaderLoop
    63 0000003D 8178143D8A1C4F      <1>     cmp     dword [eax + 0x14], FFS2_GUID_DWORD1
    64 00000044 75BC                <1>     jne     searchingForBfvHeaderLoop
    65 00000046 81781899358961      <1>     cmp     dword [eax + 0x18], FFS2_GUID_DWORD2
    66 0000004D 75B3                <1>     jne     searchingForBfvHeaderLoop
    67 0000004F 81781C85C32DD3      <1>     cmp     dword [eax + 0x1c], FFS2_GUID_DWORD3
    68 00000056 75AA                <1>     jne     searchingForBfvHeaderLoop
    69                              <1> 
    70                              <1> checkingFvLength:
    71                              <1>     ;
    72                              <1>     ; Check FV Length
    73                              <1>     ;
    74 00000058 83782400            <1>     cmp     dword [eax + 0x24], 0
    75 0000005C 75A4                <1>     jne     searchingForBfvHeaderLoop
    76 0000005E 89C3                <1>     mov     ebx, eax
    77 00000060 035820              <1>     add     ebx, dword [eax + 0x20]
    78 00000063 759D                <1>     jnz     searchingForBfvHeaderLoop
    79                              <1> 
    80 00000065 EB09                <1>     jmp     searchedForBfvHeaderAndItWasFound
    81                              <1> 
    82                              <1> searchedForBfvHeaderButNotFound:
    83                              <1>     ;
    84                              <1>     ; Hang if the SEC entry point was not found
    85                              <1>     ;
    86                              <1>     debugShowPostCode POSTCODE_BFV_NOT_FOUND
    87                              <1> 
    88                              <1>     ;
    89                              <1>     ; 0xbfbfbfbf in the EAX & EBP registers helps signal what failed
    90                              <1>     ; for debugging purposes.
    91                              <1>     ;
    92 00000067 B8BFBFBFBF          <1>     mov     eax, 0xBFBFBFBF
    93 0000006C 89C5                <1>     mov     ebp, eax
    94 0000006E EBFE                <1>     jmp     $
    95                              <1> 
    96                              <1> searchedForBfvHeaderAndItWasFound:
    97 00000070 89C5                <1>     mov     ebp, eax
    98                              <1> 
    99                              <1>     debugShowPostCode POSTCODE_BFV_FOUND
   100                              <1> 
   101                              <1>     OneTimeCallRet Flat32SearchForBfvBase
    19 00000072 E9CB090000          <2>  jmp %1 %+ OneTimerCallReturn
   102                              <1> 
    52                                  %include "Ia32/SearchForSecEntry.asm"
     1                              <1> ;------------------------------------------------------------------------------
     2                              <1> ; @file
     3                              <1> ; Search for the SEC Core entry point
     4                              <1> ;
     5                              <1> ; Copyright (c) 2008 - 2011, Intel Corporation. All rights reserved.<BR>
     6                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
     7                              <1> ;
     8                              <1> ;------------------------------------------------------------------------------
     9                              <1> 
    10                              <1> BITS    32
    11                              <1> 
    12                              <1> %define EFI_FV_FILETYPE_SECURITY_CORE         0x03
    13                              <1> 
    14                              <1> ;
    15                              <1> ; Modified:  EAX, EBX, ECX, EDX
    16                              <1> ; Preserved: EDI, EBP, ESP
    17                              <1> ;
    18                              <1> ; @param[in]   EBP  Address of Boot Firmware Volume (BFV)
    19                              <1> ; @param[out]  ESI  SEC Core Entry Point Address
    20                              <1> ;
    21                              <1> Flat32SearchForSecEntryPoint:
    22                              <1> 
    23                              <1>     ;
    24                              <1>     ; Initialize EBP and ESI to 0
    25                              <1>     ;
    26 00000077 31DB                <1>     xor     ebx, ebx
    27 00000079 89DE                <1>     mov     esi, ebx
    28                              <1> 
    29                              <1>     ;
    30                              <1>     ; Pass over the BFV header
    31                              <1>     ;
    32 0000007B 89E8                <1>     mov     eax, ebp
    33 0000007D 668B5D30            <1>     mov     bx, [ebp + 0x30]
    34 00000081 01D8                <1>     add     eax, ebx
    35 00000083 723B                <1>     jc      secEntryPointWasNotFound
    36                              <1> 
    37 00000085 EB03                <1>     jmp     searchingForFfsFileHeaderLoop
    38                              <1> 
    39                              <1> moveForwardWhileSearchingForFfsFileHeaderLoop:
    40                              <1>     ;
    41                              <1>     ; Make forward progress in the search
    42                              <1>     ;
    43 00000087 40                  <1>     inc     eax
    44 00000088 7236                <1>     jc      secEntryPointWasNotFound
    45                              <1> 
    46                              <1> searchingForFfsFileHeaderLoop:
    47 0000008A 85C0                <1>     test    eax, eax
    48 0000008C 7432                <1>     jz      secEntryPointWasNotFound
    49                              <1> 
    50                              <1>     ;
    51                              <1>     ; Ensure 8 byte alignment
    52                              <1>     ;
    53 0000008E 83C007              <1>     add     eax, 7
    54 00000091 722D                <1>     jc      secEntryPointWasNotFound
    55 00000093 24F8                <1>     and     al, 0xf8
    56                              <1> 
    57                              <1>     ;
    58                              <1>     ; Look to see if there is an FFS file at eax
    59                              <1>     ;
    60 00000095 8A5817              <1>     mov     bl, [eax + 0x17]
    61 00000098 F6C320              <1>     test    bl, 0x20
    62 0000009B 74EA                <1>     jz      moveForwardWhileSearchingForFfsFileHeaderLoop
    63 0000009D 8B4814              <1>     mov     ecx, [eax + 0x14]
    64 000000A0 81E1FFFFFF00        <1>     and     ecx, 0x00ffffff
    65 000000A6 09C9                <1>     or      ecx, ecx
    66 000000A8 74DD                <1>     jz      moveForwardWhileSearchingForFfsFileHeaderLoop
    67 000000AA 01C1                <1>     add     ecx, eax
    68 000000AC 7402                <1>     jz      jumpSinceWeFoundTheLastFfsFile
    69 000000AE 72D7                <1>     jc      moveForwardWhileSearchingForFfsFileHeaderLoop
    70                              <1> jumpSinceWeFoundTheLastFfsFile:
    71                              <1> 
    72                              <1>     ;
    73                              <1>     ; There seems to be a valid file at eax
    74                              <1>     ;
    75 000000B0 80781203            <1>     cmp     byte [eax + 0x12], EFI_FV_FILETYPE_SECURITY_CORE ; Check File Type
    76 000000B4 7506                <1>     jne     readyToTryFfsFileAtEcx
    77                              <1> 
    78                              <1> fileTypeIsSecCore:
    79                              <1>     OneTimeCall GetEntryPointOfFfsFile
    14 000000B6 EB17                <2>  jmp %1
    15                              <2> %1 %+ OneTimerCallReturn:
    80 000000B8 85C0                <1>     test    eax, eax
    81 000000BA 7506                <1>     jnz     doneSeachingForSecEntryPoint
    82                              <1> 
    83                              <1> readyToTryFfsFileAtEcx:
    84                              <1>     ;
    85                              <1>     ; Try the next FFS file at ECX
    86                              <1>     ;
    87 000000BC 89C8                <1>     mov     eax, ecx
    88 000000BE EBCA                <1>     jmp     searchingForFfsFileHeaderLoop
    89                              <1> 
    90                              <1> secEntryPointWasNotFound:
    91 000000C0 31C0                <1>     xor     eax, eax
    92                              <1> 
    93                              <1> doneSeachingForSecEntryPoint:
    94 000000C2 89C6                <1>     mov     esi, eax
    95                              <1> 
    96 000000C4 85F6                <1>     test    esi, esi
    97 000000C6 7502                <1>     jnz     secCoreEntryPointWasFound
    98                              <1> 
    99                              <1> secCoreEntryPointWasNotFound:
   100                              <1>     ;
   101                              <1>     ; Hang if the SEC entry point was not found
   102                              <1>     ;
   103                              <1>     debugShowPostCode POSTCODE_SEC_NOT_FOUND
   104 000000C8 74FE                <1>     jz      $
   105                              <1> 
   106                              <1> secCoreEntryPointWasFound:
   107                              <1>     debugShowPostCode POSTCODE_SEC_FOUND
   108                              <1> 
   109                              <1>     OneTimeCallRet Flat32SearchForSecEntryPoint
    19 000000CA E978090000          <2>  jmp %1 %+ OneTimerCallReturn
   110                              <1> 
   111                              <1> %define EFI_SECTION_PE32                  0x10
   112                              <1> %define EFI_SECTION_TE                    0x12
   113                              <1> 
   114                              <1> ;
   115                              <1> ; Input:
   116                              <1> ;   EAX - Start of FFS file
   117                              <1> ;   ECX - End of FFS file
   118                              <1> ;
   119                              <1> ; Output:
   120                              <1> ;   EAX - Entry point of PE32 (or 0 if not found)
   121                              <1> ;
   122                              <1> ; Modified:
   123                              <1> ;   EBX
   124                              <1> ;
   125                              <1> GetEntryPointOfFfsFile:
   126 000000CF 85C0                <1>     test    eax, eax
   127 000000D1 745F                <1>     jz      getEntryPointOfFfsFileErrorReturn
   128 000000D3 83C018              <1>     add     eax, 0x18       ; EAX = Start of section
   129                              <1> 
   130                              <1> getEntryPointOfFfsFileLoopForSections:
   131 000000D6 39C8                <1>     cmp     eax, ecx
   132 000000D8 7358                <1>     jae     getEntryPointOfFfsFileErrorReturn
   133                              <1> 
   134 000000DA 80780310            <1>     cmp     byte [eax + 3], EFI_SECTION_PE32
   135 000000DE 741B                <1>     je      getEntryPointOfFfsFileFoundPe32Section
   136                              <1> 
   137 000000E0 80780312            <1>     cmp     byte [eax + 3], EFI_SECTION_TE
   138 000000E4 7432                <1>     je      getEntryPointOfFfsFileFoundTeSection
   139                              <1> 
   140                              <1>     ;
   141                              <1>     ; The section type was not PE32 or TE, so move to next section
   142                              <1>     ;
   143 000000E6 8B18                <1>     mov     ebx, dword [eax]
   144 000000E8 81E3FFFFFF00        <1>     and     ebx, 0x00ffffff
   145 000000EE 01D8                <1>     add     eax, ebx
   146 000000F0 7240                <1>     jc      getEntryPointOfFfsFileErrorReturn
   147                              <1> 
   148                              <1>     ;
   149                              <1>     ; Ensure that FFS section is 32-bit aligned
   150                              <1>     ;
   151 000000F2 83C003              <1>     add     eax, 3
   152 000000F5 723B                <1>     jc      getEntryPointOfFfsFileErrorReturn
   153 000000F7 24FC                <1>     and     al, 0xfc
   154 000000F9 EBDB                <1>     jmp     getEntryPointOfFfsFileLoopForSections
   155                              <1> 
   156                              <1> getEntryPointOfFfsFileFoundPe32Section:
   157 000000FB 83C004              <1>     add     eax, 4       ; EAX = Start of PE32 image
   158                              <1> 
   159 000000FE 6681384D5A          <1>     cmp     word [eax], 'MZ'
   160 00000103 752D                <1>     jne     getEntryPointOfFfsFileErrorReturn
   161 00000105 0FB7583C            <1>     movzx   ebx, word [eax + 0x3c]
   162 00000109 01C3                <1>     add     ebx, eax
   163                              <1> 
   164                              <1>     ; if (Hdr.Pe32->Signature == EFI_IMAGE_NT_SIGNATURE)
   165 0000010B 813B50450000        <1>     cmp     dword [ebx], `PE\x00\x00`
   166 00000111 751F                <1>     jne     getEntryPointOfFfsFileErrorReturn
   167                              <1> 
   168                              <1>     ; *EntryPoint = (VOID *)((UINTN)Pe32Data +
   169                              <1>     ;   (UINTN)(Hdr.Pe32->OptionalHeader.AddressOfEntryPoint & 0x0ffffffff));
   170 00000113 034328              <1>     add     eax, [ebx + 0x4 + 0x14 + 0x10]
   171 00000116 EB1F                <1>     jmp     getEntryPointOfFfsFileReturn
   172                              <1> 
   173                              <1> getEntryPointOfFfsFileFoundTeSection:
   174 00000118 83C004              <1>     add     eax, 4       ; EAX = Start of TE image
   175 0000011B 89C3                <1>     mov     ebx, eax
   176                              <1> 
   177                              <1>     ; if (Hdr.Te->Signature == EFI_TE_IMAGE_HEADER_SIGNATURE)
   178 0000011D 66813B565A          <1>     cmp     word [ebx], 'VZ'
   179 00000122 750E                <1>     jne     getEntryPointOfFfsFileErrorReturn
   180                              <1>     ; *EntryPoint = (VOID *)((UINTN)Pe32Data +
   181                              <1>     ;   (UINTN)(Hdr.Te->AddressOfEntryPoint & 0x0ffffffff) +
   182                              <1>     ;   sizeof(EFI_TE_IMAGE_HEADER) - Hdr.Te->StrippedSize);
   183 00000124 034308              <1>     add     eax, [ebx + 0x8]
   184 00000127 83C028              <1>     add     eax, 0x28
   185 0000012A 0FB75B06            <1>     movzx   ebx, word [ebx + 0x6]
   186 0000012E 29D8                <1>     sub     eax, ebx
   187 00000130 EB05                <1>     jmp     getEntryPointOfFfsFileReturn
   188                              <1> 
   189                              <1> getEntryPointOfFfsFileErrorReturn:
   190 00000132 B800000000          <1>     mov     eax, 0
   191                              <1> 
   192                              <1> getEntryPointOfFfsFileReturn:
   193                              <1>     OneTimeCallRet GetEntryPointOfFfsFile
    19 00000137 E97CFFFFFF          <2>  jmp %1 %+ OneTimerCallReturn
   194                              <1> 
    53                                  
    54                                  %define WORK_AREA_GUEST_TYPE          (00080B000h)
    55                                  %define PT_ADDR(Offset)               (000800000h + (Offset))
    56                                  %define PG_5_LEVEL                    (0)
    57                                  
    58                                  %define GHCB_PT_ADDR                  (000808000h)
    59                                  %define GHCB_BASE                     (000809000h)
    60                                  %define GHCB_SIZE                     (000002000h)
    61                                  %define SEV_ES_WORK_AREA              (8433668)
    62                                  %define SEV_ES_WORK_AREA_SIZE         25
    63                                  %define SEV_ES_WORK_AREA_STATUS_MSR   (8433668)
    64                                  %define SEV_ES_WORK_AREA_RDRAND       (8433668 + 8)
    65                                  %define SEV_ES_WORK_AREA_ENC_MASK     (8433668 + 16)
    66                                  %define SEV_ES_WORK_AREA_RECEIVED_VC  (8433668 + 24)
    67                                  %define SEV_ES_VC_TOP_OF_STACK        (000811000h + 00000F000h)
    68                                  %define SEV_SNP_SECRETS_BASE          (00080D000h)
    69                                  %define SEV_SNP_SECRETS_SIZE          (000001000h)
    70                                  %define CPUID_BASE                    (00080E000h)
    71                                  %define CPUID_SIZE                    (000001000h)
    72                                  %define SVSM_CAA_BASE                 (00080F000h)
    73                                  %define SVSM_CAA_SIZE                 (000001000h)
    74                                  %if (00h > 0)
    75                                    ; There's a reserved page for SEV secrets and hashes; the VMM will fill and
    76                                    ; validate the page, or mark it as a zero page.
    77                                    %define SEV_SNP_KERNEL_HASHES_BASE    (00h)
    78                                    %define SEV_SNP_KERNEL_HASHES_SIZE    (00h + 00h)
    79                                  %else
    80                                    %define SEV_SNP_KERNEL_HASHES_BASE    0
    81                                    %define SEV_SNP_KERNEL_HASHES_SIZE    0
    82                                  %endif
    83                                  %define SNP_SEC_MEM_BASE_DESC_1       (000800000h)
    84                                  %define SNP_SEC_MEM_SIZE_DESC_1       (000809000h - SNP_SEC_MEM_BASE_DESC_1)
    85                                  ;
    86                                  ; The PcdOvmfSecGhcbBase reserves two GHCB pages. The first page is used
    87                                  ; as GHCB shared page and second is used for bookkeeping to support the
    88                                  ; nested GHCB in SEC phase. The bookkeeping page is mapped private. The VMM
    89                                  ; does not need to validate the shared page but it need to validate the
    90                                  ; bookkeeping page.
    91                                  ;
    92                                  %define SNP_SEC_MEM_BASE_DESC_2       (GHCB_BASE + 01000h)
    93                                  %define SNP_SEC_MEM_SIZE_DESC_2       (SEV_SNP_SECRETS_BASE - SNP_SEC_MEM_BASE_DESC_2)
    94                                  %define SNP_SEC_MEM_BASE_DESC_3       (SVSM_CAA_BASE + SVSM_CAA_SIZE + SEV_SNP_KERNEL_HASHES_SIZE)
    95                                  %define SNP_SEC_MEM_SIZE_DESC_3       (000820000h - SNP_SEC_MEM_BASE_DESC_3)
    96                                  
    97                                  %ifdef ARCH_X64
    98                                    
    99                                  
   100                                    %if (000006000h != 06000h)
   101                                      %error "This implementation inherently depends on PcdOvmfSecPageTablesSize"
   102                                    %endif
   103                                  
   104                                    %if (000001000h != 01000h)
   105                                      %error "This implementation inherently depends on PcdOvmfSecGhcbPageTableSize"
   106                                    %endif
   107                                  
   108                                    %if (000002000h != 02000h)
   109                                      %error "This implementation inherently depends on PcdOvmfSecGhcbSize"
   110                                    %endif
   111                                  
   112                                    %if ((000809000h >> 21) !=        ((000809000h + 000002000h - 1) >> 21))
   114                                      %error "This implementation inherently depends on PcdOvmfSecGhcbBase not straddling a 2MB boundary"
   115                                    %endif
   116                                  
   117                                    %define TDX_BFV_RAW_DATA_OFFSET   084000h
   118                                    %define TDX_BFV_RAW_DATA_SIZE     00037C000h
   119                                    %define TDX_BFV_MEMORY_BASE       0FFC84000h
   120                                    %define TDX_BFV_MEMORY_SIZE       00037C000h
   121                                  
   122                                    %define TDX_CFV_RAW_DATA_OFFSET   0
   123                                    %define TDX_CFV_RAW_DATA_SIZE     084000h
   124                                    %define TDX_CFV_MEMORY_BASE       0FFC00000h,
   125                                    %define TDX_CFV_MEMORY_SIZE       084000h,
   126                                  
   127                                    %define TDX_HEAP_STACK_BASE       000811000h
   128                                    %define TDX_HEAP_STACK_SIZE       00000F000h
   129                                  
   130                                    %define TDX_HOB_MEMORY_BASE       000809000h
   131                                    %define TDX_HOB_MEMORY_SIZE       000002000h
   132                                  
   133                                    %define TDX_INIT_MEMORY_BASE      00080B000h
   134                                    %define TDX_INIT_MEMORY_SIZE      (000001000h + 000001000h)
   135                                  
   136                                    %define OVMF_PAGE_TABLE_BASE      000800000h
   137                                    %define OVMF_PAGE_TABLE_SIZE      000006000h
   138                                  
   139                                    %define TDX_WORK_AREA_PGTBL_READY (00080B000h + 4)
   140                                    %define TDX_WORK_AREA_GPAW        (00080B000h + 8)
   141                                  
   142                                    %include "X64/IntelTdxMetadata.asm"
     1                              <1> ;------------------------------------------------------------------------------
     2                              <1> ; @file
     3                              <1> ; Tdx Virtual Firmware metadata
     4                              <1> ;
     5                              <1> ; When host VMM creates a new guest TD, some initial set of TD-private pages
     6                              <1> ; are added using the TDH.MEM.PAGE.ADD function. These pages typically contain
     7                              <1> ; Virtual BIOS code and data along with some clear pages for stacks and heap.
     8                              <1> ; In the meanwhile, some configuration data need be measured by host VMM.
     9                              <1> ; Tdx Metadata is designed for this purpose to indicate host VMM how to do the
    10                              <1> ; above tasks.
    11                              <1> ;
    12                              <1> ; Tdx Metadata consists of a DESCRIPTOR as the header followed by several
    13                              <1> ; SECTIONs. Host VMM sets up the memory for TDVF according to these sections.
    14                              <1> ;
    15                              <1> ; _Bfv is the example (Bfv refers to the Virtual BIOS code).
    16                              <1> ; - By DataOffset/RawDataSize host VMM knows about the position of the code
    17                              <1> ;   in the binary image.
    18                              <1> ; - MemoryAddress/MemoryDataSize indicates the guest physical address/size of
    19                              <1> ;   the Bfv to be loaded.
    20                              <1> ; - Type field means this section is of BFV. This field is designed for the
    21                              <1> ;   purpose that in some case host VMM may do some additional processing based
    22                              <1> ;   upon the section type. TdHob section is an example. Host VMM pass the
    23                              <1> ;   physical memory information to the guest firmware by writing the data in
    24                              <1> ;   the memory region designated by TdHob section.
    25                              <1> ; - By design code part of the binary image (Bfv) should be measured by host
    26                              <1> ;   VMM. This is indicated by the Attributes field.
    27                              <1> ;
    28                              <1> ; So put all these information together, when a new guest is being created,
    29                              <1> ; the initial TD-private pages for BFV is added by TDH.MEM.PAGE.ADD function,
    30                              <1> ; and Bfv is loaded at the guest physical address indicated by MemoryAddress.
    31                              <1> ; Since the Attributes is TDX_METADATA_ATTRIBUTES_EXTENDMR, Bfv is measured by
    32                              <1> ; host VMM.
    33                              <1> ;
    34                              <1> ; Copyright (c) 2021, Intel Corporation. All rights reserved.<BR>
    35                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
    36                              <1> ;
    37                              <1> ;------------------------------------------------------------------------------
    38                              <1> 
    39                              <1> BITS    64
    40                              <1> 
    41                              <1> %define TDX_METADATA_SECTION_TYPE_BFV       0
    42                              <1> %define TDX_METADATA_SECTION_TYPE_CFV       1
    43                              <1> %define TDX_METADATA_SECTION_TYPE_TD_HOB    2
    44                              <1> %define TDX_METADATA_SECTION_TYPE_TEMP_MEM  3
    45                              <1> %define TDX_METADATA_VERSION                1
    46                              <1> %define TDX_METADATA_ATTRIBUTES_EXTENDMR    0x00000001
    47                              <1> 
    48 0000013C 90<rep 4h>          <1> ALIGN   16
    49                              <1> TIMES (15 - ((TdxGuidedStructureEnd - TdxGuidedStructureStart + 15) % 16)) DB 0
    50                              <1> 
    51                              <1> TdxGuidedStructureStart:
    52                              <1> 
    53                              <1> ;
    54                              <1> ; TDVF meta data
    55                              <1> ;
    56                              <1> TdxMetadataGuid:
    57 00000140 F3F9EAE98E16D544    <1>   DB  0xf3, 0xf9, 0xea, 0xe9, 0x8e, 0x16, 0xd5, 0x44
    58 00000148 A8EB7F4D8738F6AE    <1>   DB  0xa8, 0xeb, 0x7f, 0x4d, 0x87, 0x38, 0xf6, 0xae
    59                              <1> 
    60                              <1> _Descriptor:
    61 00000150 54445646            <1>   DB 'T','D','V','F'                                  ; Signature
    62 00000154 D0000000            <1>   DD TdxGuidedStructureEnd - _Descriptor              ; Length
    63 00000158 01000000            <1>   DD TDX_METADATA_VERSION                             ; Version
    64 0000015C 06000000            <1>   DD (TdxGuidedStructureEnd - _Descriptor - 16)/32    ; Number of sections
    65                              <1> 
    66                              <1> _Bfv:
    67 00000160 00400800            <1>   DD TDX_BFV_RAW_DATA_OFFSET
    68 00000164 00C03700            <1>   DD TDX_BFV_RAW_DATA_SIZE
    69 00000168 0040C8FF00000000    <1>   DQ TDX_BFV_MEMORY_BASE
    70 00000170 00C0370000000000    <1>   DQ TDX_BFV_MEMORY_SIZE
    71 00000178 00000000            <1>   DD TDX_METADATA_SECTION_TYPE_BFV
    72 0000017C 01000000            <1>   DD TDX_METADATA_ATTRIBUTES_EXTENDMR
    73                              <1> 
    74                              <1> _Cfv:
    75 00000180 00000000            <1>   DD TDX_CFV_RAW_DATA_OFFSET
    76 00000184 00400800            <1>   DD TDX_CFV_RAW_DATA_SIZE
    77 00000188 0000C0FF00000000    <1>   DQ TDX_CFV_MEMORY_BASE
    78 00000190 0040080000000000    <1>   DQ TDX_CFV_MEMORY_SIZE
    79 00000198 01000000            <1>   DD TDX_METADATA_SECTION_TYPE_CFV
    80 0000019C 00000000            <1>   DD 0
    81                              <1> 
    82                              <1> _TdxHeapStack:
    83 000001A0 00000000            <1>   DD 0
    84 000001A4 00000000            <1>   DD 0
    85 000001A8 0010810000000000    <1>   DQ TDX_HEAP_STACK_BASE
    86 000001B0 00F0000000000000    <1>   DQ TDX_HEAP_STACK_SIZE
    87 000001B8 03000000            <1>   DD TDX_METADATA_SECTION_TYPE_TEMP_MEM
    88 000001BC 00000000            <1>   DD 0
    89                              <1> 
    90                              <1> _TdxInitMem:
    91 000001C0 00000000            <1>   DD 0
    92 000001C4 00000000            <1>   DD 0
    93 000001C8 00B0800000000000    <1>   DQ TDX_INIT_MEMORY_BASE
    94 000001D0 0020000000000000    <1>   DQ TDX_INIT_MEMORY_SIZE
    95 000001D8 03000000            <1>   DD TDX_METADATA_SECTION_TYPE_TEMP_MEM
    96 000001DC 00000000            <1>   DD 0
    97                              <1> 
    98                              <1> _TdHob:
    99 000001E0 00000000            <1>   DD 0
   100 000001E4 00000000            <1>   DD 0
   101 000001E8 0090800000000000    <1>   DQ TDX_HOB_MEMORY_BASE
   102 000001F0 0020000000000000    <1>   DQ TDX_HOB_MEMORY_SIZE
   103 000001F8 02000000            <1>   DD TDX_METADATA_SECTION_TYPE_TD_HOB
   104 000001FC 00000000            <1>   DD 0
   105                              <1> 
   106                              <1> _OvmfPageTable:
   107 00000200 00000000            <1>   DD 0
   108 00000204 00000000            <1>   DD 0
   109 00000208 0000800000000000    <1>   DQ OVMF_PAGE_TABLE_BASE
   110 00000210 0060000000000000    <1>   DQ OVMF_PAGE_TABLE_SIZE
   111 00000218 03000000            <1>   DD TDX_METADATA_SECTION_TYPE_TEMP_MEM
   112 0000021C 00000000            <1>   DD 0
   113                              <1> 
   114                              <1> TdxGuidedStructureEnd:
   115                              <1> ALIGN   16
   143                                    %include "Ia32/Flat32ToFlat64.asm"
     1                              <1> ;------------------------------------------------------------------------------
     2                              <1> ; @file
     3                              <1> ; Transition from 32 bit flat protected mode into 64 bit flat protected mode
     4                              <1> ;
     5                              <1> ; Copyright (c) 2008 - 2018, Intel Corporation. All rights reserved.<BR>
     6                              <1> ; Copyright (c) 2020, Advanced Micro Devices, Inc. All rights reserved.<BR>
     7                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
     8                              <1> ;
     9                              <1> ;------------------------------------------------------------------------------
    10                              <1> 
    11                              <1> BITS    32
    12                              <1> 
    13                              <1> ;
    14                              <1> ; Modified:  EAX, ECX, EDX
    15                              <1> ;
    16                              <1> Transition32FlatTo64Flat:
    17                              <1> 
    18                              <1>     OneTimeCall SetCr3ForPageTables64
    14 00000220 E989000000          <2>  jmp %1
    15                              <2> %1 %+ OneTimerCallReturn:
    19                              <1> 
    20 00000225 0F20E0              <1>     mov     eax, cr4
    21 00000228 0FBAE805            <1>     bts     eax, 5                      ; enable PAE
    22 0000022C 0F22E0              <1>     mov     cr4, eax
    23                              <1> 
    24                              <1>     ;
    25                              <1>     ; In TDX LME has already been set. So we're done and jump to enable
    26                              <1>     ; paging directly if Tdx is enabled.
    27                              <1>     ; EBX is cleared because in the later it will be used to check if
    28                              <1>     ; the second step of the SEV-ES mitigation is to be performed.
    29                              <1>     ;
    30 0000022F 31DB                <1>     xor     ebx, ebx
    31                              <1>     OneTimeCall IsTdxEnabled
    14 00000231 E96B030000          <2>  jmp %1
    15                              <2> %1 %+ OneTimerCallReturn:
    32 00000236 85C0                <1>     test    eax, eax
    33 00000238 7538                <1>     jnz     EnablePaging
    34                              <1> 
    35 0000023A B9800000C0          <1>     mov     ecx, 0xc0000080
    36 0000023F 0F32                <1>     rdmsr
    37 00000241 0FBAE808            <1>     bts     eax, 8                      ; set LME
    38 00000245 0F30                <1>     wrmsr
    39                              <1> 
    40                              <1>     ;
    41                              <1>     ; SEV-ES mitigation check support
    42                              <1>     ;
    43 00000247 31DB                <1>     xor     ebx, ebx
    44                              <1> 
    45 00000249 B901000000          <1>     mov     ecx, 1
    46 0000024E 0FA30D04B08000      <1>     bt      [SEV_ES_WORK_AREA_STATUS_MSR], ecx
    47 00000255 731B                <1>     jnc     EnablePaging
    48                              <1> 
    49                              <1>     ;
    50                              <1>     ; SEV-ES is active, perform a quick sanity check against the reported
    51                              <1>     ; encryption bit position. This is to help mitigate against attacks where
    52                              <1>     ; the hypervisor reports an incorrect encryption bit position.
    53                              <1>     ;
    54                              <1>     ; This is the first step in a two step process. Before paging is enabled
    55                              <1>     ; writes to memory are encrypted. Using the RDRAND instruction (available
    56                              <1>     ; on all SEV capable processors), write 64-bits of random data to the
    57                              <1>     ; SEV_ES_WORK_AREA and maintain the random data in registers (register
    58                              <1>     ; state is protected under SEV-ES). This will be used in the second step.
    59                              <1>     ;
    60                              <1> RdRand1:
    61 00000257 0FC7F1              <1>     rdrand  ecx
    62 0000025A 73FB                <1>     jnc     RdRand1
    63 0000025C 890D0CB08000        <1>     mov     dword[SEV_ES_WORK_AREA_RDRAND], ecx
    64                              <1> RdRand2:
    65 00000262 0FC7F2              <1>     rdrand  edx
    66 00000265 73FB                <1>     jnc     RdRand2
    67 00000267 891510B08000        <1>     mov     dword[SEV_ES_WORK_AREA_RDRAND + 4], edx
    68                              <1> 
    69                              <1>     ;
    70                              <1>     ; Use EBX instead of the SEV_ES_WORK_AREA memory to determine whether to
    71                              <1>     ; perform the second step.
    72                              <1>     ;
    73 0000026D BB01000000          <1>     mov     ebx, 1
    74                              <1> 
    75                              <1> EnablePaging:
    76 00000272 0F20C0              <1>     mov     eax, cr0
    77 00000275 0FBAE81F            <1>     bts     eax, 31                     ; set PG
    78 00000279 0F22C0              <1>     mov     cr0, eax                    ; enable paging
    79                              <1> 
    80 0000027C EA73F7FFFF3800      <1>     jmp     LINEAR_CODE64_SEL:ADDR_OF(jumpTo64BitAndLandHere)
    81                              <1> BITS    64
    82                              <1> jumpTo64BitAndLandHere:
    83                              <1> 
    84                              <1>     ;
    85                              <1>     ; Check if the second step of the SEV-ES mitigation is to be performed.
    86                              <1>     ;
    87 00000283 85DB                <1>     test    ebx, ebx
    88 00000285 7412                <1>     jz      InsnCompare
    89                              <1> 
    90                              <1>     ;
    91                              <1>     ; SEV-ES is active, perform the second step of the encryption bit postion
    92                              <1>     ; mitigation check. The ECX and EDX register contain data from RDRAND that
    93                              <1>     ; was stored to memory in encrypted form. If the encryption bit position is
    94                              <1>     ; valid, the contents of ECX and EDX will match the memory location.
    95                              <1>     ;
    96 00000287 390C250CB08000      <1>     cmp     dword[SEV_ES_WORK_AREA_RDRAND], ecx
    97 0000028E 7515                <1>     jne     SevEncBitHlt
    98 00000290 39142510B08000      <1>     cmp     dword[SEV_ES_WORK_AREA_RDRAND + 4], edx
    99 00000297 750C                <1>     jne     SevEncBitHlt
   100                              <1> 
   101                              <1>     ;
   102                              <1>     ; If SEV or SEV-ES is active, perform a quick sanity check against
   103                              <1>     ; the reported encryption bit position. This is to help mitigate
   104                              <1>     ; against attacks where the hypervisor reports an incorrect encryption
   105                              <1>     ; bit position. If SEV is not active, this check will always succeed.
   106                              <1>     ;
   107                              <1>     ; The cmp instruction compares the first four bytes of the cmp instruction
   108                              <1>     ; itself (which will be read decrypted if SEV or SEV-ES is active and the
   109                              <1>     ; encryption bit position is valid) against the immediate within the
   110                              <1>     ; instruction (an instruction fetch is always decrypted correctly by
   111                              <1>     ; hardware) based on RIP relative addressing.
   112                              <1>     ;
   113                              <1> InsnCompare:
   114 00000299 813DF6FFFFFF813DF6- <1>     cmp     dword[rel InsnCompare], 0xFFF63D81
   114 000002A2 FF                  <1>
   115 000002A3 7404                <1>     je      GoodCompare
   116                              <1> 
   117                              <1>     ;
   118                              <1>     ; The hypervisor provided an incorrect encryption bit position, do not
   119                              <1>     ; proceed.
   120                              <1>     ;
   121                              <1> SevEncBitHlt:
   122 000002A5 FA                  <1>     cli
   123 000002A6 F4                  <1>     hlt
   124 000002A7 EBFC                <1>     jmp     SevEncBitHlt
   125                              <1> 
   126                              <1> GoodCompare:
   127                              <1>     debugShowPostCode POSTCODE_64BIT_MODE
   128                              <1> 
   129                              <1>     OneTimeCallRet Transition32FlatTo64Flat
    19 000002A9 E99E070000          <2>  jmp %1 %+ OneTimerCallReturn
   130                              <1> 
   144                                    %include "Ia32/PageTables64.asm"
     1                              <1> ;------------------------------------------------------------------------------
     2                              <1> ; @file
     3                              <1> ; Sets the CR3 register for 64-bit paging
     4                              <1> ;
     5                              <1> ; Copyright (c) 2008 - 2013, Intel Corporation. All rights reserved.<BR>
     6                              <1> ; Copyright (c) 2017 - 2020, Advanced Micro Devices, Inc. All rights reserved.<BR>
     7                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
     8                              <1> ;
     9                              <1> ;------------------------------------------------------------------------------
    10                              <1> 
    11                              <1> BITS    32
    12                              <1> 
    13                              <1> ; common for all levels
    14                              <1> %define PAGE_PRESENT            0x01
    15                              <1> %define PAGE_READ_WRITE         0x02
    16                              <1> %define PAGE_USER_SUPERVISOR    0x04
    17                              <1> %define PAGE_WRITE_THROUGH      0x08
    18                              <1> %define PAGE_CACHE_DISABLE     0x010
    19                              <1> %define PAGE_ACCESSED          0x020
    20                              <1> %define PAGE_DIRTY             0x040
    21                              <1> %define PAGE_GLOBAL           0x0100
    22                              <1> 
    23                              <1> ; page table entries (level 1)
    24                              <1> %define PAGE_PTE_PAT           0x080
    25                              <1> 
    26                              <1> ; page directory entries (level 2+)
    27                              <1> %define PAGE_PDE_LARGEPAGE     0x080
    28                              <1> %define PAGE_PDE_PAT         0x01000
    29                              <1> 
    30                              <1> %define PAGE_4K_PDE_ATTR (PAGE_ACCESSED +                           PAGE_DIRTY +                           PAGE_READ_WRITE +                           PAGE_PRESENT)
    34                              <1> 
    35                              <1> %define PAGE_PDE_LARGEPAGE_ATTR (PAGE_PDE_LARGEPAGE +                                  PAGE_ACCESSED +                                  PAGE_DIRTY +                                  PAGE_READ_WRITE +                                  PAGE_PRESENT)
    40                              <1> 
    41                              <1> %define PAGE_PDE_DIRECTORY_ATTR (PAGE_ACCESSED +                                  PAGE_READ_WRITE +                                  PAGE_PRESENT)
    44                              <1> 
    45                              <1> %define TDX_BSP         1
    46                              <1> %define TDX_AP          2
    47                              <1> %define TDX_AP_5_LEVEL  3
    48                              <1> 
    49                              <1> ;
    50                              <1> ; For OVMF, build some initial page tables at
    51                              <1> ; PcdOvmfSecPageTablesBase - (PcdOvmfSecPageTablesBase + 0x6000).
    52                              <1> ;
    53                              <1> ; This range should match with PcdOvmfSecPageTablesSize which is
    54                              <1> ; declared in the FDF files.
    55                              <1> ;
    56                              <1> ; At the end of PEI, the pages tables will be rebuilt into a
    57                              <1> ; more permanent location by DxeIpl.
    58                              <1> ;
    59                              <1> %macro ClearOvmfPageTables 0
    60                              <1>     mov     ecx, 6 * 0x1000 / 4
    61                              <1>     xor     eax, eax
    62                              <1> .clearPageTablesMemoryLoop:
    63                              <1>     mov     dword[ecx * 4 + PT_ADDR (0) - 4], eax
    64                              <1>     loop    .clearPageTablesMemoryLoop
    65                              <1> %endmacro
    66                              <1> 
    67                              <1> ;
    68                              <1> ; Create page tables for 4-level paging
    69                              <1> ;
    70                              <1> ; Argument: upper 32 bits of the leaf page table entries
    71                              <1> ;
    72                              <1> %macro CreatePageTables4Level 1
    73                              <1> 
    74                              <1>     ; indicate 4-level paging
    75                              <1>     debugShowPostCode 0x41
    76                              <1> 
    77                              <1>     ;
    78                              <1>     ; Top level Page Directory Pointers (1 * 512GB entry)
    79                              <1>     ;
    80                              <1>     mov     dword[PT_ADDR (0)], PT_ADDR (0x1000) + PAGE_PDE_DIRECTORY_ATTR
    81                              <1>     mov     dword[PT_ADDR (4)], 0
    82                              <1> 
    83                              <1>     ;
    84                              <1>     ; Next level Page Directory Pointers (4 * 1GB entries => 4GB)
    85                              <1>     ;
    86                              <1>     mov     dword[PT_ADDR (0x1000)], PT_ADDR (0x2000) + PAGE_PDE_DIRECTORY_ATTR
    87                              <1>     mov     dword[PT_ADDR (0x1004)], 0
    88                              <1>     mov     dword[PT_ADDR (0x1008)], PT_ADDR (0x3000) + PAGE_PDE_DIRECTORY_ATTR
    89                              <1>     mov     dword[PT_ADDR (0x100C)], 0
    90                              <1>     mov     dword[PT_ADDR (0x1010)], PT_ADDR (0x4000) + PAGE_PDE_DIRECTORY_ATTR
    91                              <1>     mov     dword[PT_ADDR (0x1014)], 0
    92                              <1>     mov     dword[PT_ADDR (0x1018)], PT_ADDR (0x5000) + PAGE_PDE_DIRECTORY_ATTR
    93                              <1>     mov     dword[PT_ADDR (0x101C)], 0
    94                              <1> 
    95                              <1>     ;
    96                              <1>     ; Page Table Entries (2048 * 2MB entries => 4GB)
    97                              <1>     ;
    98                              <1>     mov     ecx, 0x800
    99                              <1> .pageTableEntriesLoop4Level:
   100                              <1>     mov     eax, ecx
   101                              <1>     dec     eax
   102                              <1>     shl     eax, 21
   103                              <1>     add     eax, PAGE_PDE_LARGEPAGE_ATTR
   104                              <1>     mov     dword[ecx * 8 + PT_ADDR (0x2000 - 8)], eax
   105                              <1>     mov     dword[(ecx * 8 + PT_ADDR (0x2000 - 8)) + 4], %1
   106                              <1>     loop    .pageTableEntriesLoop4Level
   107                              <1> %endmacro
   108                              <1> 
   109                              <1> ;
   110                              <1> ; Check whenever 5-level paging can be used
   111                              <1> ;
   112                              <1> ; Argument: jump label for 4-level paging
   113                              <1> ;
   114                              <1> %macro Check5LevelPaging 1
   115                              <1>     ; check for cpuid leaf 0x07
   116                              <1>     mov     eax, 0x00
   117                              <1>     cpuid
   118                              <1>     cmp     eax, 0x07
   119                              <1>     jb      %1
   120                              <1> 
   121                              <1>     ; check for la57 (aka 5-level paging)
   122                              <1>     mov     eax, 0x07
   123                              <1>     mov     ecx, 0x00
   124                              <1>     cpuid
   125                              <1>     bt      ecx, 16
   126                              <1>     jnc     %1
   127                              <1> 
   128                              <1>     ; check for cpuid leaf 0x80000001
   129                              <1>     mov     eax, 0x80000000
   130                              <1>     cpuid
   131                              <1>     cmp     eax, 0x80000001
   132                              <1>     jb      %1
   133                              <1> 
   134                              <1>     ; check for 1g pages
   135                              <1>     mov     eax, 0x80000001
   136                              <1>     cpuid
   137                              <1>     bt      edx, 26
   138                              <1>     jnc     %1
   139                              <1> %endmacro
   140                              <1> 
   141                              <1> ;
   142                              <1> ; Create page tables for 5-level paging with gigabyte pages
   143                              <1> ;
   144                              <1> ; Argument: upper 32 bits of the leaf page table entries
   145                              <1> ;
   146                              <1> ; We have 6 pages available for the early page tables,
   147                              <1> ; we use four of them:
   148                              <1> ;    PT_ADDR(0)      - level 5 directory
   149                              <1> ;    PT_ADDR(0x1000) - level 4 directory
   150                              <1> ;    PT_ADDR(0x2000) - level 2 directory (0 -> 1GB)
   151                              <1> ;    PT_ADDR(0x3000) - level 3 directory
   152                              <1> ;
   153                              <1> ; The level 2 directory for the first gigabyte has the same
   154                              <1> ; physical address in both 4-level and 5-level paging mode,
   155                              <1> ; SevClearPageEncMaskForGhcbPage depends on this.
   156                              <1> ;
   157                              <1> ; The 1 GB -> 4 GB range is mapped using 1G pages in the
   158                              <1> ; level 3 directory.
   159                              <1> ;
   160                              <1> %macro CreatePageTables5Level 1
   161                              <1> 
   162                              <1>     ; indicate 5-level paging
   163                              <1>     debugShowPostCode 0x51
   164                              <1> 
   165                              <1>     ; level 5
   166                              <1>     mov     dword[PT_ADDR (0)], PT_ADDR (0x1000) + PAGE_PDE_DIRECTORY_ATTR
   167                              <1>     mov     dword[PT_ADDR (4)], 0
   168                              <1> 
   169                              <1>     ; level 4
   170                              <1>     mov     dword[PT_ADDR (0x1000)], PT_ADDR (0x3000) + PAGE_PDE_DIRECTORY_ATTR
   171                              <1>     mov     dword[PT_ADDR (0x1004)], 0
   172                              <1> 
   173                              <1>     ; level 3 (1x -> level 2, 3x 1GB)
   174                              <1>     mov     dword[PT_ADDR (0x3000)], PT_ADDR (0x2000) + PAGE_PDE_DIRECTORY_ATTR
   175                              <1>     mov     dword[PT_ADDR (0x3004)], 0
   176                              <1>     mov     dword[PT_ADDR (0x3008)], (1 << 30) + PAGE_PDE_LARGEPAGE_ATTR
   177                              <1>     mov     dword[PT_ADDR (0x300c)], %1
   178                              <1>     mov     dword[PT_ADDR (0x3010)], (2 << 30) + PAGE_PDE_LARGEPAGE_ATTR
   179                              <1>     mov     dword[PT_ADDR (0x3014)], %1
   180                              <1>     mov     dword[PT_ADDR (0x3018)], (3 << 30) + PAGE_PDE_LARGEPAGE_ATTR
   181                              <1>     mov     dword[PT_ADDR (0x301c)], %1
   182                              <1> 
   183                              <1>     ;
   184                              <1>     ; level 2 (512 * 2MB entries => 1GB)
   185                              <1>     ;
   186                              <1>     mov     ecx, 0x200
   187                              <1> .pageTableEntriesLoop5Level:
   188                              <1>     mov     eax, ecx
   189                              <1>     dec     eax
   190                              <1>     shl     eax, 21
   191                              <1>     add     eax, PAGE_PDE_LARGEPAGE_ATTR
   192                              <1>     mov     dword[ecx * 8 + PT_ADDR (0x2000 - 8)], eax
   193                              <1>     mov     dword[(ecx * 8 + PT_ADDR (0x2000 - 8)) + 4], %1
   194                              <1>     loop    .pageTableEntriesLoop5Level
   195                              <1> %endmacro
   196                              <1> 
   197                              <1> %macro Enable5LevelPaging 0
   198                              <1>     ; set la57 bit in cr4
   199                              <1>     mov     eax, cr4
   200                              <1>     bts     eax, 12
   201                              <1>     mov     cr4, eax
   202                              <1> %endmacro
   203                              <1> 
   204                              <1> ;
   205                              <1> ; Modified:  EAX, EBX, ECX, EDX
   206                              <1> ;
   207                              <1> SetCr3ForPageTables64:
   208                              <1>     ; Check the TDX features.
   209                              <1>     ; If it is TDX APs, then jump to SetCr3 directly.
   210                              <1>     ; In TD guest the initialization is done by BSP, including building
   211                              <1>     ; the page tables. APs will spin on until byte[TDX_WORK_AREA_PGTBL_READY]
   212                              <1>     ; is set.
   213                              <1>     OneTimeCall   CheckTdxFeaturesBeforeBuildPagetables
    14 000002AE E9CA020000          <2>  jmp %1
    15                              <2> %1 %+ OneTimerCallReturn:
   214 000002B3 83F801              <1>     cmp       eax, TDX_BSP
   215 000002B6 0F845B010000        <1>     je        TdxBspInit
   216 000002BC 83F802              <1>     cmp       eax, TDX_AP
   217 000002BF 0F84F1010000        <1>     je        SetCr3
   218                              <1> %if PG_5_LEVEL
   219                              <1>     cmp       eax, TDX_AP_5_LEVEL
   220                              <1>     jne       CheckForSev
   221                              <1>     Enable5LevelPaging
   222                              <1>     jmp       SetCr3
   223                              <1> CheckForSev:
   224                              <1> %endif
   225                              <1> 
   226                              <1>     ; Check whether the SEV is active and populate the SevEsWorkArea
   227                              <1>     OneTimeCall   CheckSevFeatures
    14 000002C5 E9E0030000          <2>  jmp %1
    15                              <2> %1 %+ OneTimerCallReturn:
   228 000002CA 803D00B0800001      <1>     cmp       byte[WORK_AREA_GUEST_TYPE], 1
   229 000002D1 0F849D000000        <1>     jz        SevInit
   230                              <1> 
   231                              <1>     ;
   232                              <1>     ; normal (non-CoCo) workflow
   233                              <1>     ;
   234                              <1>     ClearOvmfPageTables
    60 000002D7 B900180000          <2>  mov ecx, 6 * 0x1000 / 4
    61 000002DC 31C0                <2>  xor eax, eax
    62                              <2> .clearPageTablesMemoryLoop:
    63 000002DE 89048DFCFF7F00      <2>  mov dword[ecx * 4 + PT_ADDR (0) - 4], eax
    64 000002E5 E2F7                <2>  loop .clearPageTablesMemoryLoop
   235                              <1> %if PG_5_LEVEL
   236                              <1>     Check5LevelPaging Paging4Level
   237                              <1>     CreatePageTables5Level 0
   238                              <1>     Enable5LevelPaging
   239                              <1>     jmp SetCr3
   240                              <1> Paging4Level:
   241                              <1> %endif
   242                              <1>     CreatePageTables4Level 0
    73                              <2> 
    74                              <2> 
    75                              <2>  debugShowPostCode 0x41
    76                              <2> 
    77                              <2> 
    78                              <2> 
    79                              <2> 
    80 000002E7 C70500008000231080- <2>  mov dword[PT_ADDR (0)], PT_ADDR (0x1000) + PAGE_PDE_DIRECTORY_ATTR
    80 000002F0 00                  <2>
    81 000002F1 C70504008000000000- <2>  mov dword[PT_ADDR (4)], 0
    81 000002FA 00                  <2>
    82                              <2> 
    83                              <2> 
    84                              <2> 
    85                              <2> 
    86 000002FB C70500108000232080- <2>  mov dword[PT_ADDR (0x1000)], PT_ADDR (0x2000) + PAGE_PDE_DIRECTORY_ATTR
    86 00000304 00                  <2>
    87 00000305 C70504108000000000- <2>  mov dword[PT_ADDR (0x1004)], 0
    87 0000030E 00                  <2>
    88 0000030F C70508108000233080- <2>  mov dword[PT_ADDR (0x1008)], PT_ADDR (0x3000) + PAGE_PDE_DIRECTORY_ATTR
    88 00000318 00                  <2>
    89 00000319 C7050C108000000000- <2>  mov dword[PT_ADDR (0x100C)], 0
    89 00000322 00                  <2>
    90 00000323 C70510108000234080- <2>  mov dword[PT_ADDR (0x1010)], PT_ADDR (0x4000) + PAGE_PDE_DIRECTORY_ATTR
    90 0000032C 00                  <2>
    91 0000032D C70514108000000000- <2>  mov dword[PT_ADDR (0x1014)], 0
    91 00000336 00                  <2>
    92 00000337 C70518108000235080- <2>  mov dword[PT_ADDR (0x1018)], PT_ADDR (0x5000) + PAGE_PDE_DIRECTORY_ATTR
    92 00000340 00                  <2>
    93 00000341 C7051C108000000000- <2>  mov dword[PT_ADDR (0x101C)], 0
    93 0000034A 00                  <2>
    94                              <2> 
    95                              <2> 
    96                              <2> 
    97                              <2> 
    98 0000034B B900080000          <2>  mov ecx, 0x800
    99                              <2> .pageTableEntriesLoop4Level:
   100 00000350 89C8                <2>  mov eax, ecx
   101 00000352 48                  <2>  dec eax
   102 00000353 C1E015              <2>  shl eax, 21
   103 00000356 05E3000000          <2>  add eax, PAGE_PDE_LARGEPAGE_ATTR
   104 0000035B 8904CDF81F8000      <2>  mov dword[ecx * 8 + PT_ADDR (0x2000 - 8)], eax
   105 00000362 C704CDFC1F80000000- <2>  mov dword[(ecx * 8 + PT_ADDR (0x2000 - 8)) + 4], %1
   105 0000036B 0000                <2>
   106 0000036D E2E1                <2>  loop .pageTableEntriesLoop4Level
   243 0000036F E942010000          <1>     jmp SetCr3
   244                              <1> 
   245                              <1> SevInit:
   246                              <1>     ;
   247                              <1>     ; SEV workflow
   248                              <1>     ;
   249                              <1>     ClearOvmfPageTables
    60 00000374 B900180000          <2>  mov ecx, 6 * 0x1000 / 4
    61 00000379 31C0                <2>  xor eax, eax
    62                              <2> .clearPageTablesMemoryLoop:
    63 0000037B 89048DFCFF7F00      <2>  mov dword[ecx * 4 + PT_ADDR (0) - 4], eax
    64 00000382 E2F7                <2>  loop .clearPageTablesMemoryLoop
   250                              <1>     ; If SEV is enabled, the C-bit position is always above 31.
   251                              <1>     ; The mask will be saved in the EDX and applied during the
   252                              <1>     ; the page table build below.
   253                              <1>     OneTimeCall   GetSevCBitMaskAbove31
    14 00000384 E916030000          <2>  jmp %1
    15                              <2> %1 %+ OneTimerCallReturn:
   254                              <1>     CreatePageTables4Level edx
    73                              <2> 
    74                              <2> 
    75                              <2>  debugShowPostCode 0x41
    76                              <2> 
    77                              <2> 
    78                              <2> 
    79                              <2> 
    80 00000389 C70500008000231080- <2>  mov dword[PT_ADDR (0)], PT_ADDR (0x1000) + PAGE_PDE_DIRECTORY_ATTR
    80 00000392 00                  <2>
    81 00000393 C70504008000000000- <2>  mov dword[PT_ADDR (4)], 0
    81 0000039C 00                  <2>
    82                              <2> 
    83                              <2> 
    84                              <2> 
    85                              <2> 
    86 0000039D C70500108000232080- <2>  mov dword[PT_ADDR (0x1000)], PT_ADDR (0x2000) + PAGE_PDE_DIRECTORY_ATTR
    86 000003A6 00                  <2>
    87 000003A7 C70504108000000000- <2>  mov dword[PT_ADDR (0x1004)], 0
    87 000003B0 00                  <2>
    88 000003B1 C70508108000233080- <2>  mov dword[PT_ADDR (0x1008)], PT_ADDR (0x3000) + PAGE_PDE_DIRECTORY_ATTR
    88 000003BA 00                  <2>
    89 000003BB C7050C108000000000- <2>  mov dword[PT_ADDR (0x100C)], 0
    89 000003C4 00                  <2>
    90 000003C5 C70510108000234080- <2>  mov dword[PT_ADDR (0x1010)], PT_ADDR (0x4000) + PAGE_PDE_DIRECTORY_ATTR
    90 000003CE 00                  <2>
    91 000003CF C70514108000000000- <2>  mov dword[PT_ADDR (0x1014)], 0
    91 000003D8 00                  <2>
    92 000003D9 C70518108000235080- <2>  mov dword[PT_ADDR (0x1018)], PT_ADDR (0x5000) + PAGE_PDE_DIRECTORY_ATTR
    92 000003E2 00                  <2>
    93 000003E3 C7051C108000000000- <2>  mov dword[PT_ADDR (0x101C)], 0
    93 000003EC 00                  <2>
    94                              <2> 
    95                              <2> 
    96                              <2> 
    97                              <2> 
    98 000003ED B900080000          <2>  mov ecx, 0x800
    99                              <2> .pageTableEntriesLoop4Level:
   100 000003F2 89C8                <2>  mov eax, ecx
   101 000003F4 48                  <2>  dec eax
   102 000003F5 C1E015              <2>  shl eax, 21
   103 000003F8 05E3000000          <2>  add eax, PAGE_PDE_LARGEPAGE_ATTR
   104 000003FD 8904CDF81F8000      <2>  mov dword[ecx * 8 + PT_ADDR (0x2000 - 8)], eax
   105 00000404 8914CDFC1F8000      <2>  mov dword[(ecx * 8 + PT_ADDR (0x2000 - 8)) + 4], %1
   106 0000040B E2E5                <2>  loop .pageTableEntriesLoop4Level
   255                              <1>     ; Clear the C-bit from the GHCB page if the SEV-ES is enabled.
   256                              <1>     OneTimeCall   SevClearPageEncMaskForGhcbPage
    14 0000040D E92B020000          <2>  jmp %1
    15                              <2> %1 %+ OneTimerCallReturn:
   257 00000412 E99F000000          <1>     jmp SetCr3
   258                              <1> 
   259                              <1> TdxBspInit:
   260                              <1>     ;
   261                              <1>     ; TDX BSP workflow
   262                              <1>     ;
   263                              <1>     ClearOvmfPageTables
    60 00000417 B900180000          <2>  mov ecx, 6 * 0x1000 / 4
    61 0000041C 31C0                <2>  xor eax, eax
    62                              <2> .clearPageTablesMemoryLoop:
    63 0000041E 89048DFCFF7F00      <2>  mov dword[ecx * 4 + PT_ADDR (0) - 4], eax
    64 00000425 E2F7                <2>  loop .clearPageTablesMemoryLoop
   264                              <1> %if PG_5_LEVEL
   265                              <1>     Check5LevelPaging Tdx4Level
   266                              <1>     CreatePageTables5Level 0
   267                              <1>     OneTimeCall TdxPostBuildPageTables5Level
   268                              <1>     Enable5LevelPaging
   269                              <1>     jmp SetCr3
   270                              <1> Tdx4Level:
   271                              <1> %endif
   272                              <1>     CreatePageTables4Level 0
    73                              <2> 
    74                              <2> 
    75                              <2>  debugShowPostCode 0x41
    76                              <2> 
    77                              <2> 
    78                              <2> 
    79                              <2> 
    80 00000427 C70500008000231080- <2>  mov dword[PT_ADDR (0)], PT_ADDR (0x1000) + PAGE_PDE_DIRECTORY_ATTR
    80 00000430 00                  <2>
    81 00000431 C70504008000000000- <2>  mov dword[PT_ADDR (4)], 0
    81 0000043A 00                  <2>
    82                              <2> 
    83                              <2> 
    84                              <2> 
    85                              <2> 
    86 0000043B C70500108000232080- <2>  mov dword[PT_ADDR (0x1000)], PT_ADDR (0x2000) + PAGE_PDE_DIRECTORY_ATTR
    86 00000444 00                  <2>
    87 00000445 C70504108000000000- <2>  mov dword[PT_ADDR (0x1004)], 0
    87 0000044E 00                  <2>
    88 0000044F C70508108000233080- <2>  mov dword[PT_ADDR (0x1008)], PT_ADDR (0x3000) + PAGE_PDE_DIRECTORY_ATTR
    88 00000458 00                  <2>
    89 00000459 C7050C108000000000- <2>  mov dword[PT_ADDR (0x100C)], 0
    89 00000462 00                  <2>
    90 00000463 C70510108000234080- <2>  mov dword[PT_ADDR (0x1010)], PT_ADDR (0x4000) + PAGE_PDE_DIRECTORY_ATTR
    90 0000046C 00                  <2>
    91 0000046D C70514108000000000- <2>  mov dword[PT_ADDR (0x1014)], 0
    91 00000476 00                  <2>
    92 00000477 C70518108000235080- <2>  mov dword[PT_ADDR (0x1018)], PT_ADDR (0x5000) + PAGE_PDE_DIRECTORY_ATTR
    92 00000480 00                  <2>
    93 00000481 C7051C108000000000- <2>  mov dword[PT_ADDR (0x101C)], 0
    93 0000048A 00                  <2>
    94                              <2> 
    95                              <2> 
    96                              <2> 
    97                              <2> 
    98 0000048B B900080000          <2>  mov ecx, 0x800
    99                              <2> .pageTableEntriesLoop4Level:
   100 00000490 89C8                <2>  mov eax, ecx
   101 00000492 48                  <2>  dec eax
   102 00000493 C1E015              <2>  shl eax, 21
   103 00000496 05E3000000          <2>  add eax, PAGE_PDE_LARGEPAGE_ATTR
   104 0000049B 8904CDF81F8000      <2>  mov dword[ecx * 8 + PT_ADDR (0x2000 - 8)], eax
   105 000004A2 C704CDFC1F80000000- <2>  mov dword[(ecx * 8 + PT_ADDR (0x2000 - 8)) + 4], %1
   105 000004AB 0000                <2>
   106 000004AD E2E1                <2>  loop .pageTableEntriesLoop4Level
   273                              <1>     OneTimeCall TdxPostBuildPageTables
    14 000004AF E9E1000000          <2>  jmp %1
    15                              <2> %1 %+ OneTimerCallReturn:
   274 000004B4 EB00                <1>     jmp SetCr3
   275                              <1> 
   276                              <1> SetCr3:
   277                              <1>     ;
   278                              <1>     ; common workflow
   279                              <1>     ;
   280                              <1>     ; Set CR3 now that the paging structures are available
   281                              <1>     ;
   282 000004B6 B800008000          <1>     mov     eax, PT_ADDR (0)
   283 000004BB 0F22D8              <1>     mov     cr3, eax
   284                              <1> 
   285                              <1>     OneTimeCallRet SetCr3ForPageTables64
    19 000004BE E962FDFFFF          <2>  jmp %1 %+ OneTimerCallReturn
   145                                    %include "Ia32/IntelTdx.asm"
     1                              <1> ;------------------------------------------------------------------------------
     2                              <1> ; @file
     3                              <1> ;   Intel TDX routines
     4                              <1> ;
     5                              <1> ; Copyright (c) 2021, Intel Corporation. All rights reserved.<BR>
     6                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
     7                              <1> ;
     8                              <1> ;------------------------------------------------------------------------------
     9                              <1> 
    10                              <1> %define VM_GUEST_TDX     2
    11                              <1> 
    12                              <1> BITS 32
    13                              <1> 
    14                              <1> ;
    15                              <1> ; Check if it is Intel Tdx
    16                              <1> ;
    17                              <1> ; Modified: EAX, EBX, ECX, EDX
    18                              <1> ;
    19                              <1> ; If it is Intel Tdx, EAX is 1
    20                              <1> ; If it is not Intel Tdx, EAX is 0
    21                              <1> ;
    22                              <1> IsTdx:
    23                              <1>     ;
    24                              <1>     ; CPUID (0)
    25                              <1>     ;
    26 000004C3 B800000000          <1>     mov     eax, 0
    27 000004C8 0FA2                <1>     cpuid
    28 000004CA 81FB47656E75        <1>     cmp     ebx, 0x756e6547  ; "Genu"
    29 000004D0 7556                <1>     jne     IsNotTdx
    30 000004D2 81FA696E6549        <1>     cmp     edx, 0x49656e69  ; "ineI"
    31 000004D8 754E                <1>     jne     IsNotTdx
    32 000004DA 81F96E74656C        <1>     cmp     ecx, 0x6c65746e  ; "ntel"
    33 000004E0 7546                <1>     jne     IsNotTdx
    34                              <1> 
    35                              <1>     ;
    36                              <1>     ; CPUID (1)
    37                              <1>     ;
    38 000004E2 B801000000          <1>     mov     eax, 1
    39 000004E7 0FA2                <1>     cpuid
    40 000004E9 F7C100000080        <1>     test    ecx, 0x80000000
    41 000004EF 7437                <1>     jz      IsNotTdx
    42                              <1> 
    43                              <1>     ;
    44                              <1>     ; CPUID[0].EAX >= 0x21?
    45                              <1>     ;
    46 000004F1 B800000000          <1>     mov     eax, 0
    47 000004F6 0FA2                <1>     cpuid
    48 000004F8 83F821              <1>     cmp     eax, 0x21
    49 000004FB 7C2B                <1>     jl      IsNotTdx
    50                              <1> 
    51                              <1>     ;
    52                              <1>     ; CPUID (0x21,0)
    53                              <1>     ;
    54 000004FD B821000000          <1>     mov     eax, 0x21
    55 00000502 B900000000          <1>     mov     ecx, 0
    56 00000507 0FA2                <1>     cpuid
    57                              <1> 
    58 00000509 81FB496E7465        <1>     cmp     ebx, 0x65746E49   ; "Inte"
    59 0000050F 7517                <1>     jne     IsNotTdx
    60 00000511 81FA6C544458        <1>     cmp     edx, 0x5844546C   ; "lTDX"
    61 00000517 750F                <1>     jne     IsNotTdx
    62 00000519 81F920202020        <1>     cmp     ecx, 0x20202020   ; "    "
    63 0000051F 7507                <1>     jne     IsNotTdx
    64                              <1> 
    65 00000521 B801000000          <1>     mov     eax, 1
    66 00000526 EB02                <1>     jmp     ExitIsTdx
    67                              <1> 
    68                              <1> IsNotTdx:
    69 00000528 31C0                <1>     xor     eax, eax
    70                              <1> 
    71                              <1> ExitIsTdx:
    72                              <1> 
    73                              <1>   OneTimeCallRet IsTdx
    19 0000052A EB02                <2>  jmp %1 %+ OneTimerCallReturn
    74                              <1> 
    75                              <1> ;
    76                              <1> ; Initialize work area if it is Tdx guest. Detailed definition is in
    77                              <1> ; OvmfPkg/Include/WorkArea.h.
    78                              <1> ; BSP and APs all go here. Only BSP initialize this work area.
    79                              <1> ;
    80                              <1> ; Param[in] EBX[5:0]    CPU Supported GPAW (48 or 52)
    81                              <1> ; Param[in] ESI[31:0]   vCPU ID (BSP is 0, others are AP)
    82                              <1> ;
    83                              <1> ; Modified:  EBX
    84                              <1> ;
    85                              <1> InitTdxWorkarea:
    86                              <1> 
    87                              <1>     ;
    88                              <1>     ; First check if it is Tdx
    89                              <1>     ;
    90                              <1>     OneTimeCall IsTdx
    14 0000052C EB95                <2>  jmp %1
    15                              <2> %1 %+ OneTimerCallReturn:
    91                              <1> 
    92 0000052E 85C0                <1>     test    eax, eax
    93 00000530 7420                <1>     jz      ExitInitTdxWorkarea
    94                              <1> 
    95 00000532 83FE00              <1>     cmp     esi, 0
    96 00000535 740B                <1>     je      TdxBspEntry
    97                              <1> 
    98                              <1>     ;
    99                              <1>     ; In Td guest, BSP/AP shares the same entry point
   100                              <1>     ; BSP builds up the page table, while APs shouldn't do the same task.
   101                              <1>     ; Instead, APs just leverage the page table which is built by BSP.
   102                              <1>     ; APs will wait until the page table is ready.
   103                              <1>     ;
   104                              <1> TdxApWait:
   105 00000537 803D04B0800000      <1>     cmp     byte[TDX_WORK_AREA_PGTBL_READY], 0
   106 0000053E 74F7                <1>     je      TdxApWait
   107 00000540 EB10                <1>     jmp     ExitInitTdxWorkarea
   108                              <1> 
   109                              <1> TdxBspEntry:
   110                              <1>     ;
   111                              <1>     ; Set Type of WORK_AREA_GUEST_TYPE so that the following code can use
   112                              <1>     ; these information.
   113                              <1>     ;
   114 00000542 C60500B0800002      <1>     mov     byte[WORK_AREA_GUEST_TYPE], VM_GUEST_TDX
   115                              <1> 
   116                              <1>     ;
   117                              <1>     ; EBX[5:0] CPU supported GPA width
   118                              <1>     ;
   119 00000549 83E33F              <1>     and     ebx, 0x3f
   120 0000054C 891D08B08000        <1>     mov     DWORD[TDX_WORK_AREA_GPAW], ebx
   121                              <1> 
   122                              <1> ExitInitTdxWorkarea:
   123                              <1>     OneTimeCallRet InitTdxWorkarea
    19 00000552 EB24                <2>  jmp %1 %+ OneTimerCallReturn
   124                              <1> 
   125                              <1> ;
   126                              <1> ; Load the GDT and set the CS/DS/ES/FS/GS/SS.
   127                              <1> ;
   128                              <1> ; Modified:  EAX, DS, ES, FS, GS, SS, CS
   129                              <1> ;
   130                              <1> ReloadFlat32:
   131                              <1> 
   132 00000554 FA                  <1>     cli
   133 00000555 B8C8FEFFFF          <1>     mov     eax, ADDR_OF(gdtr)
   134 0000055A 0F0110              <1>     lgdt    [eax]
   135                              <1> 
   136 0000055D EA54FAFFFF1000      <1>     jmp     LINEAR_CODE_SEL:dword ADDR_OF(jumpToFlat32BitAndLandHere)
   137                              <1> 
   138                              <1> jumpToFlat32BitAndLandHere:
   139                              <1> 
   140                              <1>     debugShowPostCode POSTCODE_32BIT_MODE
   141                              <1> 
   142 00000564 66B81800            <1>     mov     ax, LINEAR_SEL
   143 00000568 8ED8                <1>     mov     ds, ax
   144 0000056A 8EC0                <1>     mov     es, ax
   145 0000056C 8EE0                <1>     mov     fs, ax
   146 0000056E 8EE8                <1>     mov     gs, ax
   147 00000570 8ED0                <1>     mov     ss, ax
   148                              <1> 
   149                              <1>     OneTimeCallRet ReloadFlat32
    19 00000572 EB02                <2>  jmp %1 %+ OneTimerCallReturn
   150                              <1> 
   151                              <1> ;
   152                              <1> ; Tdx initialization after entering into ResetVector
   153                              <1> ;
   154                              <1> ; Modified:  EAX, EBX, ECX, EDX, EBP, EDI, ESP
   155                              <1> ;
   156                              <1> InitTdx:
   157                              <1>     ;
   158                              <1>     ; First load the GDT and jump to Flat32 mode
   159                              <1>     ;
   160                              <1>     OneTimeCall ReloadFlat32
    14 00000574 EBDE                <2>  jmp %1
    15                              <2> %1 %+ OneTimerCallReturn:
   161                              <1> 
   162                              <1>     ;
   163                              <1>     ; Initialization of Tdx work area
   164                              <1>     ;
   165                              <1>     OneTimeCall  InitTdxWorkarea
    14 00000576 EBB4                <2>  jmp %1
    15                              <2> %1 %+ OneTimerCallReturn:
   166                              <1> 
   167                              <1>     OneTimeCallRet InitTdx
    19 00000578 E9C0040000          <2>  jmp %1 %+ OneTimerCallReturn
   168                              <1> 
   169                              <1> ;
   170                              <1> ; Check TDX features, TDX or TDX-BSP or TDX-APs?
   171                              <1> ;
   172                              <1> ; By design TDX BSP is reponsible for initializing the PageTables.
   173                              <1> ; After PageTables are ready, byte[TDX_WORK_AREA_PGTBL_READY] is set to 1.
   174                              <1> ; APs will spin when byte[TDX_WORK_AREA_PGTBL_READY] is 0 until it is set to 1.
   175                              <1> ;
   176                              <1> ; When this routine is run on TDX BSP, byte[TDX_WORK_AREA_PGTBL_READY] should be 0.
   177                              <1> ; When this routine is run on TDX APs, byte[TDX_WORK_AREA_PGTBL_READY] should be 1.
   178                              <1> ;
   179                              <1> ;
   180                              <1> ; Modified:  EAX, EDX
   181                              <1> ;
   182                              <1> ; 0-NonTdx, 1-TdxBsp, 2-TdxAps, 3-TdxAps5Level
   183                              <1> ;
   184                              <1> CheckTdxFeaturesBeforeBuildPagetables:
   185 0000057D 31C0                <1>     xor     eax, eax
   186 0000057F 803D00B0800002      <1>     cmp     byte[WORK_AREA_GUEST_TYPE], VM_GUEST_TDX
   187 00000586 7508                <1>     jne     NotTdx
   188                              <1> 
   189 00000588 31D2                <1>     xor     edx, edx
   190 0000058A A004B08000          <1>     mov     al, byte[TDX_WORK_AREA_PGTBL_READY]
   191 0000058F 40                  <1>     inc     eax
   192                              <1> 
   193                              <1> NotTdx:
   194                              <1>     OneTimeCallRet CheckTdxFeaturesBeforeBuildPagetables
    19 00000590 E91EFDFFFF          <2>  jmp %1 %+ OneTimerCallReturn
   195                              <1> 
   196                              <1> ;
   197                              <1> ; Set byte[TDX_WORK_AREA_PGTBL_READY] to 1
   198                              <1> ;
   199                              <1> TdxPostBuildPageTables:
   200 00000595 C60504B0800001      <1>     mov     byte[TDX_WORK_AREA_PGTBL_READY], 1
   201                              <1>     OneTimeCallRet TdxPostBuildPageTables
    19 0000059C E913FFFFFF          <2>  jmp %1 %+ OneTimerCallReturn
   202                              <1> 
   203                              <1> %if PG_5_LEVEL
   204                              <1> 
   205                              <1> ;
   206                              <1> ; Set byte[TDX_WORK_AREA_PGTBL_READY] to 2
   207                              <1> ;
   208                              <1> TdxPostBuildPageTables5Level:
   209                              <1>     mov     byte[TDX_WORK_AREA_PGTBL_READY], 2
   210                              <1>     OneTimeCallRet TdxPostBuildPageTables5Level
   211                              <1> 
   212                              <1> %endif
   213                              <1> 
   214                              <1> ;
   215                              <1> ; Check if TDX is enabled
   216                              <1> ;
   217                              <1> ; Modified:  EAX
   218                              <1> ;
   219                              <1> ; If TDX is enabled then EAX will be 1
   220                              <1> ; If TDX is disabled then EAX will be 0.
   221                              <1> ;
   222                              <1> IsTdxEnabled:
   223 000005A1 31C0                <1>     xor     eax, eax
   224 000005A3 803D00B0800002      <1>     cmp     byte[WORK_AREA_GUEST_TYPE], VM_GUEST_TDX
   225 000005AA 7505                <1>     jne     TdxNotEnabled
   226 000005AC B801000000          <1>     mov     eax, 1
   227                              <1> 
   228                              <1> TdxNotEnabled:
   229                              <1>     OneTimeCallRet IsTdxEnabled
    19 000005B1 E980FCFFFF          <2>  jmp %1 %+ OneTimerCallReturn
   146                                    %include "X64/OvmfSevMetadata.asm"
     1                              <1> ;-----------------------------------------------------------------------------
     2                              <1> ; @file
     3                              <1> ; OVMF metadata for the AMD SEV confidential computing guests
     4                              <1> ;
     5                              <1> ; Copyright (c) 2021 - 2024, AMD Inc. All rights reserved.<BR>
     6                              <1> ;
     7                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
     8                              <1> ;-----------------------------------------------------------------------------
     9                              <1> 
    10                              <1> BITS  64
    11                              <1> 
    12                              <1> %define OVMF_SEV_METADATA_VERSION     1
    13                              <1> 
    14                              <1> ; The section must be accepted or validated by the VMM before the boot
    15                              <1> %define OVMF_SECTION_TYPE_SNP_SEC_MEM     0x1
    16                              <1> 
    17                              <1> ; AMD SEV-SNP specific sections
    18                              <1> %define OVMF_SECTION_TYPE_SNP_SECRETS     0x2
    19                              <1> 
    20                              <1> ;
    21                              <1> ; The section contains the hypervisor pre-populated CPUID values.
    22                              <1> ; In the case of SEV-SNP, the CPUID values are filtered and measured by
    23                              <1> ; the SEV-SNP firmware.
    24                              <1> ; The CPUID format is documented in SEV-SNP firmware spec 0.9 section 7.1
    25                              <1> ; (CPUID function structure).
    26                              <1> ;
    27                              <1> %define OVMF_SECTION_TYPE_CPUID           0x3
    28                              <1> 
    29                              <1> ; The SVSM Calling Area Address (CAA)
    30                              <1> %define OVMF_SECTION_TYPE_SVSM_CAA        0x4
    31                              <1> 
    32                              <1> ; Kernel hashes section for measured direct boot
    33                              <1> %define OVMF_SECTION_TYPE_KERNEL_HASHES   0x10
    34                              <1> 
    35 000005B6 90<rep Ah>          <1> ALIGN 16
    36                              <1> 
    37 000005C0 00<rep 8h>          <1> TIMES (15 - ((OvmfSevGuidedStructureEnd - OvmfSevGuidedStructureStart + 15) % 16)) DB 0
    38                              <1> 
    39                              <1> OvmfSevGuidedStructureStart:
    40                              <1> ;
    41                              <1> ; OvmfSev metadata descriptor
    42                              <1> ;
    43                              <1> OvmfSevMetadataGuid:
    44                              <1> 
    45                              <1> _DescriptorSev:
    46 000005C8 41534556            <1>   DB 'A','S','E','V'                                        ; Signature
    47 000005CC 58000000            <1>   DD OvmfSevGuidedStructureEnd - _DescriptorSev             ; Length
    48 000005D0 01000000            <1>   DD OVMF_SEV_METADATA_VERSION                              ; Version
    49 000005D4 06000000            <1>   DD (OvmfSevGuidedStructureEnd - _DescriptorSev - 16) / 12 ; Number of sections
    50                              <1> 
    51                              <1> ; Region need to be pre-validated by the hypervisor
    52                              <1> PreValidate1:
    53 000005D8 00008000            <1>   DD  SNP_SEC_MEM_BASE_DESC_1
    54 000005DC 00900000            <1>   DD  SNP_SEC_MEM_SIZE_DESC_1
    55 000005E0 01000000            <1>   DD  OVMF_SECTION_TYPE_SNP_SEC_MEM
    56                              <1> PreValidate2:
    57 000005E4 00A08000            <1>   DD  SNP_SEC_MEM_BASE_DESC_2
    58 000005E8 00300000            <1>   DD  SNP_SEC_MEM_SIZE_DESC_2
    59 000005EC 01000000            <1>   DD  OVMF_SECTION_TYPE_SNP_SEC_MEM
    60                              <1> 
    61                              <1> ; SEV-SNP Secrets page
    62                              <1> SevSnpSecrets:
    63 000005F0 00D08000            <1>   DD  SEV_SNP_SECRETS_BASE
    64 000005F4 00100000            <1>   DD  SEV_SNP_SECRETS_SIZE
    65 000005F8 02000000            <1>   DD  OVMF_SECTION_TYPE_SNP_SECRETS
    66                              <1> 
    67                              <1> ; CPUID values
    68                              <1> CpuidSec:
    69 000005FC 00E08000            <1>   DD  CPUID_BASE
    70 00000600 00100000            <1>   DD  CPUID_SIZE
    71 00000604 03000000            <1>   DD  OVMF_SECTION_TYPE_CPUID
    72                              <1> 
    73                              <1> ; SVSM CAA page
    74                              <1> SvsmCaa:
    75 00000608 00F08000            <1>   DD  SVSM_CAA_BASE
    76 0000060C 00100000            <1>   DD  SVSM_CAA_SIZE
    77 00000610 04000000            <1>   DD  OVMF_SECTION_TYPE_SVSM_CAA
    78                              <1> 
    79                              <1> %if (SEV_SNP_KERNEL_HASHES_BASE > 0)
    80                              <1> ; Kernel hashes for measured direct boot, or zero page if
    81                              <1> ; there are no kernel hashes / SEV secrets
    82                              <1> SevSnpKernelHashes:
    83                              <1>   DD  SEV_SNP_KERNEL_HASHES_BASE
    84                              <1>   DD  SEV_SNP_KERNEL_HASHES_SIZE
    85                              <1>   DD  OVMF_SECTION_TYPE_KERNEL_HASHES
    86                              <1> %endif
    87                              <1> 
    88                              <1> ; Region need to be pre-validated by the hypervisor
    89                              <1> PreValidate3:
    90 00000614 00008100            <1>   DD  SNP_SEC_MEM_BASE_DESC_3
    91 00000618 00000100            <1>   DD  SNP_SEC_MEM_SIZE_DESC_3
    92 0000061C 01000000            <1>   DD  OVMF_SECTION_TYPE_SNP_SEC_MEM
    93                              <1> OvmfSevGuidedStructureEnd:
    94                              <1>   ALIGN   16
   147                                  %endif
   148                                  
   149                                  %include "Ia32/AmdSev.asm"
     1                              <1> ;------------------------------------------------------------------------------
     2                              <1> ; @file
     3                              <1> ; Provide the functions to check whether SEV and SEV-ES is enabled.
     4                              <1> ;
     5                              <1> ; Copyright (c) 2017 - 2021, Advanced Micro Devices, Inc. All rights reserved.<BR>
     6                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
     7                              <1> ;
     8                              <1> ;------------------------------------------------------------------------------
     9                              <1> 
    10                              <1> BITS    32
    11                              <1> 
    12                              <1> ;
    13                              <1> ; SEV-ES #VC exception handler support
    14                              <1> ;
    15                              <1> ; #VC handler local variable locations
    16                              <1> ;
    17                              <1> %define VC_CPUID_RESULT_EAX         0
    18                              <1> %define VC_CPUID_RESULT_EBX         4
    19                              <1> %define VC_CPUID_RESULT_ECX         8
    20                              <1> %define VC_CPUID_RESULT_EDX        12
    21                              <1> %define VC_GHCB_MSR_EDX            16
    22                              <1> %define VC_GHCB_MSR_EAX            20
    23                              <1> %define VC_CPUID_REQUEST_REGISTER  24
    24                              <1> %define VC_CPUID_FUNCTION          28
    25                              <1> 
    26                              <1> ; #VC handler total local variable size
    27                              <1> ;
    28                              <1> %define VC_VARIABLE_SIZE           32
    29                              <1> 
    30                              <1> ; #VC handler GHCB CPUID request/response protocol values
    31                              <1> ;
    32                              <1> %define GHCB_CPUID_REQUEST          4
    33                              <1> %define GHCB_CPUID_RESPONSE         5
    34                              <1> %define GHCB_CPUID_REGISTER_SHIFT  30
    35                              <1> %define CPUID_INSN_LEN              2
    36                              <1> 
    37                              <1> ; #VC handler offsets/sizes for accessing SNP CPUID page
    38                              <1> ;
    39                              <1> %define SNP_CPUID_ENTRY_SZ         48
    40                              <1> %define SNP_CPUID_COUNT             0
    41                              <1> %define SNP_CPUID_ENTRY            16
    42                              <1> %define SNP_CPUID_ENTRY_EAX_IN      0
    43                              <1> %define SNP_CPUID_ENTRY_ECX_IN      4
    44                              <1> %define SNP_CPUID_ENTRY_EAX        24
    45                              <1> %define SNP_CPUID_ENTRY_EBX        28
    46                              <1> %define SNP_CPUID_ENTRY_ECX        32
    47                              <1> %define SNP_CPUID_ENTRY_EDX        36
    48                              <1> 
    49                              <1> 
    50                              <1> %define SEV_GHCB_MSR                0xc0010130
    51                              <1> %define SEV_STATUS_MSR              0xc0010131
    52                              <1> 
    53                              <1> ; The #VC was not for CPUID
    54                              <1> %define TERM_VC_NOT_CPUID           1
    55                              <1> 
    56                              <1> ; The unexpected response code
    57                              <1> %define TERM_UNEXPECTED_RESP_CODE   2
    58                              <1> 
    59                              <1> %define PAGE_PRESENT            0x01
    60                              <1> %define PAGE_READ_WRITE         0x02
    61                              <1> %define PAGE_USER_SUPERVISOR    0x04
    62                              <1> %define PAGE_WRITE_THROUGH      0x08
    63                              <1> %define PAGE_CACHE_DISABLE     0x010
    64                              <1> %define PAGE_ACCESSED          0x020
    65                              <1> %define PAGE_DIRTY             0x040
    66                              <1> %define PAGE_PAT               0x080
    67                              <1> %define PAGE_GLOBAL           0x0100
    68                              <1> %define PAGE_2M_MBO            0x080
    69                              <1> %define PAGE_2M_PAT          0x01000
    70                              <1> 
    71                              <1> %define PAGE_4K_PDE_ATTR (PAGE_ACCESSED +                           PAGE_DIRTY +                           PAGE_READ_WRITE +                           PAGE_PRESENT)
    75                              <1> 
    76                              <1> %define PAGE_PDP_ATTR (PAGE_ACCESSED +                        PAGE_READ_WRITE +                        PAGE_PRESENT)
    79                              <1> 
    80                              <1> 
    81                              <1> ; Macro is used to issue the MSR protocol based VMGEXIT. The caller is
    82                              <1> ; responsible to populate values in the EDX:EAX registers. After the vmmcall
    83                              <1> ; returns, it verifies that the response code matches with the expected
    84                              <1> ; code. If it does not match then terminate the guest. The result of request
    85                              <1> ; is returned in the EDX:EAX.
    86                              <1> ;
    87                              <1> ; args 1:Request code, 2: Response code
    88                              <1> %macro VmgExit 2
    89                              <1>     ;
    90                              <1>     ; Add request code:
    91                              <1>     ;   GHCB_MSR[11:0]  = Request code
    92                              <1>     or      eax, %1
    93                              <1> 
    94                              <1>     mov     ecx, SEV_GHCB_MSR
    95                              <1>     wrmsr
    96                              <1> 
    97                              <1>     ; Issue VMGEXIT - NASM doesn't support the vmmcall instruction in 32-bit
    98                              <1>     ; mode, so work around this by temporarily switching to 64-bit mode.
    99                              <1>     ;
   100                              <1> BITS    64
   101                              <1>     rep     vmmcall
   102                              <1> BITS    32
   103                              <1> 
   104                              <1>     mov     ecx, SEV_GHCB_MSR
   105                              <1>     rdmsr
   106                              <1> 
   107                              <1>     ;
   108                              <1>     ; Verify the reponse code, if it does not match then request to terminate
   109                              <1>     ;   GHCB_MSR[11:0]  = Response code
   110                              <1>     mov     ecx, eax
   111                              <1>     and     ecx, 0xfff
   112                              <1>     cmp     ecx, %2
   113                              <1>     jne     SevEsUnexpectedRespTerminate
   114                              <1> %endmacro
   115                              <1> 
   116                              <1> ; Macro to terminate the guest using the VMGEXIT.
   117                              <1> ; arg 1: reason code
   118                              <1> %macro TerminateVmgExit 1
   119                              <1>     mov     eax, %1
   120                              <1>     ;
   121                              <1>     ; Use VMGEXIT to request termination. At this point the reason code is
   122                              <1>     ; located in EAX, so shift it left 16 bits to the proper location.
   123                              <1>     ;
   124                              <1>     ; EAX[11:0]  => 0x100 - request termination
   125                              <1>     ; EAX[15:12] => 0x1   - OVMF
   126                              <1>     ; EAX[23:16] => 0xXX  - REASON CODE
   127                              <1>     ;
   128                              <1>     shl     eax, 16
   129                              <1>     or      eax, 0x1100
   130                              <1>     xor     edx, edx
   131                              <1>     mov     ecx, SEV_GHCB_MSR
   132                              <1>     wrmsr
   133                              <1>     ;
   134                              <1>     ; Issue VMGEXIT - NASM doesn't support the vmmcall instruction in 32-bit
   135                              <1>     ; mode, so work around this by temporarily switching to 64-bit mode.
   136                              <1>     ;
   137                              <1> BITS    64
   138                              <1>     rep     vmmcall
   139                              <1> BITS    32
   140                              <1> 
   141                              <1>     ;
   142                              <1>     ; We shouldn't come back from the VMGEXIT, but if we do, just loop.
   143                              <1>     ;
   144                              <1> %%TerminateHlt:
   145                              <1>     hlt
   146                              <1>     jmp     %%TerminateHlt
   147                              <1> %endmacro
   148                              <1> 
   149                              <1> ; Terminate the guest due to unexpected response code.
   150                              <1> SevEsUnexpectedRespTerminate:
   151                              <1>     TerminateVmgExit    TERM_UNEXPECTED_RESP_CODE
   119 00000620 B802000000          <2>  mov eax, %1
   120                              <2> 
   121                              <2> 
   122                              <2> 
   123                              <2> 
   124                              <2> 
   125                              <2> 
   126                              <2> 
   127                              <2> 
   128 00000625 C1E010              <2>  shl eax, 16
   129 00000628 0D00110000          <2>  or eax, 0x1100
   130 0000062D 31D2                <2>  xor edx, edx
   131 0000062F B9300101C0          <2>  mov ecx, SEV_GHCB_MSR
   132 00000634 0F30                <2>  wrmsr
   133                              <2> 
   134                              <2> 
   135                              <2> 
   136                              <2> 
   137                              <2> BITS 64
   138 00000636 F30F01D9            <2>  rep vmmcall
   139                              <2> BITS 32
   140                              <2> 
   141                              <2> 
   142                              <2> 
   143                              <2> 
   144                              <2> %%TerminateHlt:
   145 0000063A F4                  <2>  hlt
   146 0000063B EBFD                <2>  jmp %%TerminateHlt
   152                              <1> 
   153                              <1> %ifdef ARCH_X64
   154                              <1> 
   155                              <1> ; If SEV-ES is enabled then initialize and make the GHCB page shared
   156                              <1> SevClearPageEncMaskForGhcbPage:
   157                              <1>     ; Check if SEV-ES is enabled
   158 0000063D B901000000          <1>     mov       ecx, 1
   159 00000642 0FA30D04B08000      <1>     bt        [SEV_ES_WORK_AREA_STATUS_MSR], ecx
   160 00000649 734F                <1>     jnc       SevClearPageEncMaskForGhcbPageExit
   161                              <1> 
   162                              <1>     ;
   163                              <1>     ; The initial GHCB will live at GHCB_BASE and needs to be un-encrypted.
   164                              <1>     ; This requires the 2MB page for this range be broken down into 512 4KB
   165                              <1>     ; pages.  All will be marked encrypted, except for the GHCB. Since the
   166                              <1>     ; original PMD entry is no longer a leaf entry, remove the encryption
   167                              <1>     ; bit when pointing to the PTE page.
   168                              <1>     ;
   169 0000064B B904000000          <1>     mov     ecx, (GHCB_BASE >> 21)
   170 00000650 B823808000          <1>     mov     eax, GHCB_PT_ADDR + PAGE_PDP_ATTR
   171 00000655 8904CD00208000      <1>     mov     [ecx * 8 + PT_ADDR (0x2000)], eax
   172 0000065C C704CD042080000000- <1>     mov     [ecx * 8 + PT_ADDR (0x2000) + 4], strict dword 0
   172 00000665 0000                <1>
   173                              <1> 
   174                              <1>     ;
   175                              <1>     ; Page Table Entries (512 * 4KB entries => 2MB)
   176                              <1>     ;
   177 00000667 B900020000          <1>     mov     ecx, 512
   178                              <1> pageTableEntries4kLoop:
   179 0000066C 89C8                <1>     mov     eax, ecx
   180 0000066E 48                  <1>     dec     eax
   181 0000066F C1E00C              <1>     shl     eax, 12
   182 00000672 0500008000          <1>     add     eax, GHCB_BASE & 0xFFE0_0000
   183 00000677 83C063              <1>     add     eax, PAGE_4K_PDE_ATTR
   184 0000067A 8904CDF87F8000      <1>     mov     [ecx * 8 + GHCB_PT_ADDR - 8], eax
   185 00000681 8914CDFC7F8000      <1>     mov     [(ecx * 8 + GHCB_PT_ADDR - 8) + 4], edx
   186 00000688 E2E2                <1>     loop    pageTableEntries4kLoop
   187                              <1> 
   188                              <1>     ;
   189                              <1>     ; Clear the encryption bit from the GHCB entry
   190                              <1>     ;
   191 0000068A B909000000          <1>     mov     ecx, (GHCB_BASE & 0x1F_FFFF) >> 12
   192 0000068F C704CD048080000000- <1>     mov     [ecx * 8 + GHCB_PT_ADDR + 4], strict dword 0
   192 00000698 0000                <1>
   193                              <1> 
   194                              <1> SevClearPageEncMaskForGhcbPageExit:
   195                              <1>     OneTimeCallRet SevClearPageEncMaskForGhcbPage
    19 0000069A E973FDFFFF          <2>  jmp %1 %+ OneTimerCallReturn
   196                              <1> 
   197                              <1> ; Get the C-bit mask above 31.
   198                              <1> ; Modified: EDX
   199                              <1> ;
   200                              <1> ; The value is returned in the EDX
   201                              <1> GetSevCBitMaskAbove31:
   202 0000069F 8B1518B08000        <1>     mov       edx, dword[SEV_ES_WORK_AREA_ENC_MASK + 4]
   203                              <1>     OneTimeCallRet GetSevCBitMaskAbove31
    19 000006A5 E9DFFCFFFF          <2>  jmp %1 %+ OneTimerCallReturn
   204                              <1> 
   205                              <1> %endif
   206                              <1> 
   207                              <1> ; Check if Secure Encrypted Virtualization (SEV) features are enabled.
   208                              <1> ;
   209                              <1> ; Register usage is tight in this routine, so multiple calls for the
   210                              <1> ; same CPUID and MSR data are performed to keep things simple.
   211                              <1> ;
   212                              <1> ; Modified:  EAX, EBX, ECX, EDX, ESP
   213                              <1> ;
   214                              <1> ; If SEV is enabled then EAX will be at least 32.
   215                              <1> ; If SEV is disabled then EAX will be zero.
   216                              <1> ;
   217                              <1> CheckSevFeatures:
   218                              <1>     ;
   219                              <1>     ; Clear the workarea, if SEV is enabled then later part of routine
   220                              <1>     ; will populate the workarea fields.
   221                              <1>     ;
   222 000006AA B919000000          <1>     mov    ecx, SEV_ES_WORK_AREA_SIZE
   223 000006AF B804B08000          <1>     mov    eax, SEV_ES_WORK_AREA
   224                              <1> ClearSevEsWorkArea:
   225 000006B4 C60000              <1>     mov    byte [eax], 0
   226 000006B7 40                  <1>     inc    eax
   227 000006B8 E2FA                <1>     loop   ClearSevEsWorkArea
   228                              <1> 
   229                              <1>     ;
   230                              <1>     ; Set up exception handlers to check for SEV-ES
   231                              <1>     ;   Load temporary RAM stack based on PCDs (see SevEsIdtVmmComm for
   232                              <1>     ;   stack usage)
   233                              <1>     ;   Establish exception handlers
   234                              <1>     ;
   235 000006BA BC00008200          <1>     mov       esp, SEV_ES_VC_TOP_OF_STACK
   236 000006BF B876FDFFFF          <1>     mov       eax, ADDR_OF(Idtr)
   237 000006C4 2E0F0118            <1>     lidt      [cs:eax]
   238                              <1> 
   239                              <1>     ; Check if we have a valid (0x8000_001F) CPUID leaf
   240                              <1>     ;   CPUID raises a #VC exception if running as an SEV-ES guest
   241 000006C8 B800000080          <1>     mov       eax, 0x80000000
   242 000006CD 0FA2                <1>     cpuid
   243                              <1> 
   244                              <1>     ; This check should fail on Intel or Non SEV AMD CPUs. In future if
   245                              <1>     ; Intel CPUs supports this CPUID leaf then we are guranteed to have exact
   246                              <1>     ; same bit definition.
   247 000006CF 3D1F000080          <1>     cmp       eax, 0x8000001f
   248 000006D4 7C5E                <1>     jl        NoSev
   249                              <1> 
   250                              <1>     ; Check for SEV memory encryption feature:
   251                              <1>     ; CPUID  Fn8000_001F[EAX] - Bit 1
   252                              <1>     ;   CPUID raises a #VC exception if running as an SEV-ES guest
   253 000006D6 B81F000080          <1>     mov       eax, 0x8000001f
   254 000006DB 0FA2                <1>     cpuid
   255 000006DD 0FBAE001            <1>     bt        eax, 1
   256 000006E1 7351                <1>     jnc       NoSev
   257                              <1> 
   258                              <1>     ; Check if SEV memory encryption is enabled
   259                              <1>     ;  MSR_0xC0010131 - Bit 0 (SEV enabled)
   260 000006E3 B9310101C0          <1>     mov       ecx, SEV_STATUS_MSR
   261 000006E8 0F32                <1>     rdmsr
   262 000006EA 0FBAE000            <1>     bt        eax, 0
   263 000006EE 7344                <1>     jnc       NoSev
   264                              <1> 
   265                              <1>     ; Set the work area header to indicate that the SEV is enabled
   266 000006F0 C60500B0800001      <1>     mov     byte[WORK_AREA_GUEST_TYPE], 1
   267                              <1> 
   268                              <1>     ; Save the SevStatus MSR value in the workarea
   269 000006F7 A304B08000          <1>     mov     [SEV_ES_WORK_AREA_STATUS_MSR], eax
   270 000006FC 891508B08000        <1>     mov     [SEV_ES_WORK_AREA_STATUS_MSR + 4], edx
   271                              <1> 
   272                              <1>     ; Check if SEV-ES is enabled
   273                              <1>     ;  MSR_0xC0010131 - Bit 1 (SEV-ES enabled)
   274 00000702 B9310101C0          <1>     mov       ecx, SEV_STATUS_MSR
   275 00000707 0F32                <1>     rdmsr
   276 00000709 0FBAE001            <1>     bt        eax, 1
   277 0000070D 7300                <1>     jnc       GetSevEncBit
   278                              <1> 
   279                              <1> GetSevEncBit:
   280                              <1>     ; Get pte bit position to enable memory encryption
   281                              <1>     ; CPUID Fn8000_001F[EBX] - Bits 5:0
   282                              <1>     ;
   283 0000070F 83E33F              <1>     and       ebx, 0x3f
   284 00000712 89D8                <1>     mov       eax, ebx
   285                              <1> 
   286                              <1>     ; The encryption bit position is always above 31
   287 00000714 83EB20              <1>     sub       ebx, 32
   288 00000717 7904                <1>     jns       SevSaveMask
   289                              <1> 
   290                              <1>     ; Encryption bit was reported as 31 or below, enter a HLT loop
   291                              <1> SevEncBitLowHlt:
   292 00000719 FA                  <1>     cli
   293 0000071A F4                  <1>     hlt
   294 0000071B EBFC                <1>     jmp       SevEncBitLowHlt
   295                              <1> 
   296                              <1> SevSaveMask:
   297 0000071D 31D2                <1>     xor       edx, edx
   298 0000071F 0FABDA              <1>     bts       edx, ebx
   299                              <1> 
   300 00000722 C70514B08000000000- <1>     mov       dword[SEV_ES_WORK_AREA_ENC_MASK], 0
   300 0000072B 00                  <1>
   301 0000072C 891518B08000        <1>     mov       dword[SEV_ES_WORK_AREA_ENC_MASK + 4], edx
   302 00000732 EB0F                <1>     jmp       SevExit
   303                              <1> 
   304                              <1> NoSev:
   305                              <1>     ;
   306                              <1>     ; Perform an SEV-ES sanity check by seeing if a #VC exception occurred.
   307                              <1>     ;
   308                              <1>     ; If SEV-ES is enabled, the CPUID instruction will trigger a #VC exception
   309                              <1>     ; where the RECEIVED_VC offset in the workarea will be set to one.
   310                              <1>     ;
   311 00000734 803D1CB0800000      <1>     cmp       byte[SEV_ES_WORK_AREA_RECEIVED_VC], 0
   312 0000073B 7404                <1>     jz        NoSevPass
   313                              <1> 
   314                              <1>     ;
   315                              <1>     ; A #VC was received, yet CPUID indicates no SEV-ES support, something
   316                              <1>     ; isn't right.
   317                              <1>     ;
   318                              <1> NoSevEsVcHlt:
   319 0000073D FA                  <1>     cli
   320 0000073E F4                  <1>     hlt
   321 0000073F EBFC                <1>     jmp       NoSevEsVcHlt
   322                              <1> 
   323                              <1> NoSevPass:
   324 00000741 31C0                <1>     xor       eax, eax
   325                              <1> 
   326                              <1> SevExit:
   327                              <1>     ;
   328                              <1>     ; Clear exception handlers and stack
   329                              <1>     ;
   330 00000743 50                  <1>     push      eax
   331 00000744 B87CFDFFFF          <1>     mov       eax, ADDR_OF(IdtrClear)
   332 00000749 2E0F0118            <1>     lidt      [cs:eax]
   333 0000074D 58                  <1>     pop       eax
   334 0000074E BC00000000          <1>     mov       esp, 0
   335                              <1> 
   336                              <1>     OneTimeCallRet CheckSevFeatures
    19 00000753 E972FBFFFF          <2>  jmp %1 %+ OneTimerCallReturn
   337                              <1> 
   338                              <1> ; Start of #VC exception handling routines
   339                              <1> ;
   340                              <1> 
   341                              <1> SevEsIdtNotCpuid:
   342                              <1>     TerminateVmgExit TERM_VC_NOT_CPUID
   119 00000758 B801000000          <2>  mov eax, %1
   120                              <2> 
   121                              <2> 
   122                              <2> 
   123                              <2> 
   124                              <2> 
   125                              <2> 
   126                              <2> 
   127                              <2> 
   128 0000075D C1E010              <2>  shl eax, 16
   129 00000760 0D00110000          <2>  or eax, 0x1100
   130 00000765 31D2                <2>  xor edx, edx
   131 00000767 B9300101C0          <2>  mov ecx, SEV_GHCB_MSR
   132 0000076C 0F30                <2>  wrmsr
   133                              <2> 
   134                              <2> 
   135                              <2> 
   136                              <2> 
   137                              <2> BITS 64
   138 0000076E F30F01D9            <2>  rep vmmcall
   139                              <2> BITS 32
   140                              <2> 
   141                              <2> 
   142                              <2> 
   143                              <2> 
   144                              <2> %%TerminateHlt:
   145 00000772 F4                  <2>  hlt
   146 00000773 EBFD                <2>  jmp %%TerminateHlt
   343 00000775 CF                  <1>     iret
   344                              <1> 
   345                              <1> ; Use the SNP CPUID page to handle the cpuid lookup
   346                              <1> ;
   347                              <1> ;  Modified: EAX, EBX, ECX, EDX
   348                              <1> ;
   349                              <1> ;  Relies on the stack setup/usage in #VC handler:
   350                              <1> ;
   351                              <1> ;    On entry,
   352                              <1> ;      [esp + VC_CPUID_FUNCTION] contains EAX input to cpuid instruction
   353                              <1> ;
   354                              <1> ;    On return, stores corresponding results of CPUID lookup in:
   355                              <1> ;      [esp + VC_CPUID_RESULT_EAX]
   356                              <1> ;      [esp + VC_CPUID_RESULT_EBX]
   357                              <1> ;      [esp + VC_CPUID_RESULT_ECX]
   358                              <1> ;      [esp + VC_CPUID_RESULT_EDX]
   359                              <1> ;
   360                              <1> SnpCpuidLookup:
   361 00000776 8B44241C            <1>     mov     eax, [esp + VC_CPUID_FUNCTION]
   362 0000077A 8B1D00E08000        <1>     mov     ebx, [CPUID_BASE + SNP_CPUID_COUNT]
   363 00000780 B910E08000          <1>     mov     ecx, CPUID_BASE + SNP_CPUID_ENTRY
   364                              <1>     ; Zero these out now so we can simply return if lookup fails
   365 00000785 C7042400000000      <1>     mov     dword[esp + VC_CPUID_RESULT_EAX], 0
   366 0000078C C744240400000000    <1>     mov     dword[esp + VC_CPUID_RESULT_EBX], 0
   367 00000794 C744240800000000    <1>     mov     dword[esp + VC_CPUID_RESULT_ECX], 0
   368 0000079C C744240C00000000    <1>     mov     dword[esp + VC_CPUID_RESULT_EDX], 0
   369                              <1> 
   370                              <1> SnpCpuidCheckEntry:
   371 000007A4 83FB00              <1>     cmp     ebx, 0
   372 000007A7 0F84C0000000        <1>     je      VmmDoneSnpCpuid
   373 000007AD 3901                <1>     cmp     dword[ecx + SNP_CPUID_ENTRY_EAX_IN], eax
   374 000007AF 7506                <1>     jne     SnpCpuidCheckEntryNext
   375                              <1>     ; As with SEV-ES handler we assume requested CPUID sub-leaf/index is 0
   376 000007B1 83790400            <1>     cmp     dword[ecx + SNP_CPUID_ENTRY_ECX_IN], 0
   377 000007B5 7406                <1>     je      SnpCpuidEntryFound
   378                              <1> 
   379                              <1> SnpCpuidCheckEntryNext:
   380 000007B7 4B                  <1>     dec     ebx
   381 000007B8 83C130              <1>     add     ecx, SNP_CPUID_ENTRY_SZ
   382 000007BB EBE7                <1>     jmp     SnpCpuidCheckEntry
   383                              <1> 
   384                              <1> SnpCpuidEntryFound:
   385 000007BD 8B4118              <1>     mov     eax, [ecx + SNP_CPUID_ENTRY_EAX]
   386 000007C0 890424              <1>     mov     [esp + VC_CPUID_RESULT_EAX], eax
   387 000007C3 8B411C              <1>     mov     eax, [ecx + SNP_CPUID_ENTRY_EBX]
   388 000007C6 89442404            <1>     mov     [esp + VC_CPUID_RESULT_EBX], eax
   389 000007CA 8B4120              <1>     mov     eax, [ecx + SNP_CPUID_ENTRY_ECX]
   390 000007CD 89442408            <1>     mov     [esp + VC_CPUID_RESULT_ECX], eax
   391 000007D1 8B4124              <1>     mov     eax, [ecx + SNP_CPUID_ENTRY_EDX]
   392 000007D4 8944240C            <1>     mov     [esp + VC_CPUID_RESULT_EDX], eax
   393 000007D8 E990000000          <1>     jmp     VmmDoneSnpCpuid
   394                              <1> 
   395                              <1> ;
   396                              <1> ; Total stack usage for the #VC handler is 44 bytes:
   397                              <1> ;   - 12 bytes for the exception IRET (after popping error code)
   398                              <1> ;   - 32 bytes for the local variables.
   399                              <1> ;
   400                              <1> SevEsIdtVmmComm:
   401                              <1>     ;
   402                              <1>     ; If we're here, then we are an SEV-ES guest and this
   403                              <1>     ; was triggered by a CPUID instruction
   404                              <1>     ;
   405                              <1>     ; Set the recievedVc field in the workarea to communicate that
   406                              <1>     ; a #VC was taken.
   407 000007DD C6051CB0800001      <1>     mov     byte[SEV_ES_WORK_AREA_RECEIVED_VC], 1
   408                              <1> 
   409 000007E4 59                  <1>     pop     ecx                     ; Error code
   410 000007E5 83F972              <1>     cmp     ecx, 0x72               ; Be sure it was CPUID
   411 000007E8 0F856AFFFFFF        <1>     jne     SevEsIdtNotCpuid
   412                              <1> 
   413                              <1>     ; Set up local variable room on the stack
   414                              <1>     ;   CPUID function         : + 28
   415                              <1>     ;   CPUID request register : + 24
   416                              <1>     ;   GHCB MSR (EAX)         : + 20
   417                              <1>     ;   GHCB MSR (EDX)         : + 16
   418                              <1>     ;   CPUID result (EDX)     : + 12
   419                              <1>     ;   CPUID result (ECX)     : + 8
   420                              <1>     ;   CPUID result (EBX)     : + 4
   421                              <1>     ;   CPUID result (EAX)     : + 0
   422 000007EE 83EC20              <1>     sub     esp, VC_VARIABLE_SIZE
   423                              <1> 
   424                              <1>     ; Save the CPUID function being requested
   425 000007F1 8944241C            <1>     mov     [esp + VC_CPUID_FUNCTION], eax
   426                              <1> 
   427                              <1>     ; If SEV-SNP is enabled, use the CPUID page to handle the CPUID
   428                              <1>     ; instruction.
   429 000007F5 B9310101C0          <1>     mov     ecx, SEV_STATUS_MSR
   430 000007FA 0F32                <1>     rdmsr
   431 000007FC 0FBAE002            <1>     bt      eax, 2
   432 00000800 0F8270FFFFFF        <1>     jc      SnpCpuidLookup
   433                              <1> 
   434                              <1>     ; The GHCB CPUID protocol uses the following mapping to request
   435                              <1>     ; a specific register:
   436                              <1>     ;   0 => EAX, 1 => EBX, 2 => ECX, 3 => EDX
   437                              <1>     ;
   438                              <1>     ; Set EAX as the first register to request. This will also be used as a
   439                              <1>     ; loop variable to request all register values (EAX to EDX).
   440 00000806 31C0                <1>     xor     eax, eax
   441 00000808 89442418            <1>     mov     [esp + VC_CPUID_REQUEST_REGISTER], eax
   442                              <1> 
   443                              <1>     ; Save current GHCB MSR value
   444 0000080C B9300101C0          <1>     mov     ecx, SEV_GHCB_MSR
   445 00000811 0F32                <1>     rdmsr
   446 00000813 89442414            <1>     mov     [esp + VC_GHCB_MSR_EAX], eax
   447 00000817 89542410            <1>     mov     [esp + VC_GHCB_MSR_EDX], edx
   448                              <1> 
   449                              <1> NextReg:
   450                              <1>     ;
   451                              <1>     ; Setup GHCB MSR
   452                              <1>     ;   GHCB_MSR[63:32] = CPUID function
   453                              <1>     ;   GHCB_MSR[31:30] = CPUID register
   454                              <1>     ;   GHCB_MSR[11:0]  = CPUID request protocol
   455                              <1>     ;
   456 0000081B 8B442418            <1>     mov     eax, [esp + VC_CPUID_REQUEST_REGISTER]
   457 0000081F 83F804              <1>     cmp     eax, 4
   458 00000822 7D3A                <1>     jge     VmmDone
   459                              <1> 
   460 00000824 C1E01E              <1>     shl     eax, GHCB_CPUID_REGISTER_SHIFT
   461 00000827 8B54241C            <1>     mov     edx, [esp + VC_CPUID_FUNCTION]
   462                              <1> 
   463                              <1>     VmgExit GHCB_CPUID_REQUEST, GHCB_CPUID_RESPONSE
    89                              <2> 
    90                              <2> 
    91                              <2> 
    92 0000082B 83C804              <2>  or eax, %1
    93                              <2> 
    94 0000082E B9300101C0          <2>  mov ecx, SEV_GHCB_MSR
    95 00000833 0F30                <2>  wrmsr
    96                              <2> 
    97                              <2> 
    98                              <2> 
    99                              <2> 
   100                              <2> BITS 64
   101 00000835 F30F01D9            <2>  rep vmmcall
   102                              <2> BITS 32
   103                              <2> 
   104 00000839 B9300101C0          <2>  mov ecx, SEV_GHCB_MSR
   105 0000083E 0F32                <2>  rdmsr
   106                              <2> 
   107                              <2> 
   108                              <2> 
   109                              <2> 
   110 00000840 89C1                <2>  mov ecx, eax
   111 00000842 81E1FF0F0000        <2>  and ecx, 0xfff
   112 00000848 83F905              <2>  cmp ecx, %2
   113 0000084B 0F85CFFDFFFF        <2>  jne SevEsUnexpectedRespTerminate
   464                              <1> 
   465                              <1>     ;
   466                              <1>     ; Response GHCB MSR
   467                              <1>     ;   GHCB_MSR[63:32] = CPUID register value
   468                              <1>     ;   GHCB_MSR[31:30] = CPUID register
   469                              <1>     ;   GHCB_MSR[11:0]  = CPUID response protocol
   470                              <1>     ;
   471                              <1> 
   472                              <1>     ; Save returned value
   473 00000851 C1E81E              <1>     shr     eax, GHCB_CPUID_REGISTER_SHIFT
   474 00000854 891484              <1>     mov     [esp + eax * 4], edx
   475                              <1> 
   476                              <1>     ; Next register
   477 00000857 66FF442418          <1>     inc     word [esp + VC_CPUID_REQUEST_REGISTER]
   478                              <1> 
   479 0000085C EBBD                <1>     jmp     NextReg
   480                              <1> 
   481                              <1> VmmDone:
   482                              <1>     ;
   483                              <1>     ; At this point we have all CPUID register values. Restore the GHCB MSR,
   484                              <1>     ; set the return register values and return.
   485                              <1>     ;
   486 0000085E 8B442414            <1>     mov     eax, [esp + VC_GHCB_MSR_EAX]
   487 00000862 8B542410            <1>     mov     edx, [esp + VC_GHCB_MSR_EDX]
   488 00000866 B9300101C0          <1>     mov     ecx, SEV_GHCB_MSR
   489 0000086B 0F30                <1>     wrmsr
   490                              <1> 
   491                              <1> VmmDoneSnpCpuid:
   492 0000086D 8B0424              <1>     mov     eax, [esp + VC_CPUID_RESULT_EAX]
   493 00000870 8B5C2404            <1>     mov     ebx, [esp + VC_CPUID_RESULT_EBX]
   494 00000874 8B4C2408            <1>     mov     ecx, [esp + VC_CPUID_RESULT_ECX]
   495 00000878 8B54240C            <1>     mov     edx, [esp + VC_CPUID_RESULT_EDX]
   496                              <1> 
   497 0000087C 83C420              <1>     add     esp, VC_VARIABLE_SIZE
   498                              <1> 
   499                              <1>     ; Update the EIP value to skip over the now handled CPUID instruction
   500                              <1>     ; (the CPUID instruction has a length of 2)
   501 0000087F 6683042402          <1>     add     word [esp], CPUID_INSN_LEN
   502 00000884 CF                  <1>     iret
   503                              <1> 
   504 00000885 90                  <1> ALIGN   2
   505                              <1> 
   506                              <1> Idtr:
   507 00000886 FF00                <1>     dw      IDT_END - IDT_BASE - 1  ; Limit
   508 00000888 90FDFFFF            <1>     dd      ADDR_OF(IDT_BASE)       ; Base
   509                              <1> 
   510                              <1> IdtrClear:
   511 0000088C 0000                <1>     dw      0                       ; Limit
   512 0000088E 00000000            <1>     dd      0                       ; Base
   513                              <1> 
   514 00000892 90<rep Eh>          <1> ALIGN   16
   515                              <1> 
   516                              <1> ;
   517                              <1> ; The Interrupt Descriptor Table (IDT)
   518                              <1> ;   This will be used to determine if SEV-ES is enabled.  Upon execution
   519                              <1> ;   of the CPUID instruction, a VMM Communication Exception will occur.
   520                              <1> ;   This will tell us if SEV-ES is enabled.  We can use the current value
   521                              <1> ;   of the GHCB MSR to determine the SEV attributes.
   522                              <1> ;
   523                              <1> IDT_BASE:
   524                              <1> ;
   525                              <1> ; Vectors 0 - 28 (No handlers)
   526                              <1> ;
   527                              <1> %rep 29
   528                              <1>     dw      0                                    ; Offset low bits 15..0
   529                              <1>     dw      0x10                                 ; Selector
   530                              <1>     db      0                                    ; Reserved
   531                              <1>     db      0x8E                                 ; Gate Type (IA32_IDT_GATE_TYPE_INTERRUPT_32)
   532                              <1>     dw      0                                    ; Offset high bits 31..16
   533                              <1> %endrep
   528 000008A0 0000                <2>  dw 0
   529 000008A2 1000                <2>  dw 0x10
   530 000008A4 00                  <2>  db 0
   531 000008A5 8E                  <2>  db 0x8E
   532 000008A6 0000                <2>  dw 0
   528 000008A8 0000                <2>  dw 0
   529 000008AA 1000                <2>  dw 0x10
   530 000008AC 00                  <2>  db 0
   531 000008AD 8E                  <2>  db 0x8E
   532 000008AE 0000                <2>  dw 0
   528 000008B0 0000                <2>  dw 0
   529 000008B2 1000                <2>  dw 0x10
   530 000008B4 00                  <2>  db 0
   531 000008B5 8E                  <2>  db 0x8E
   532 000008B6 0000                <2>  dw 0
   528 000008B8 0000                <2>  dw 0
   529 000008BA 1000                <2>  dw 0x10
   530 000008BC 00                  <2>  db 0
   531 000008BD 8E                  <2>  db 0x8E
   532 000008BE 0000                <2>  dw 0
   528 000008C0 0000                <2>  dw 0
   529 000008C2 1000                <2>  dw 0x10
   530 000008C4 00                  <2>  db 0
   531 000008C5 8E                  <2>  db 0x8E
   532 000008C6 0000                <2>  dw 0
   528 000008C8 0000                <2>  dw 0
   529 000008CA 1000                <2>  dw 0x10
   530 000008CC 00                  <2>  db 0
   531 000008CD 8E                  <2>  db 0x8E
   532 000008CE 0000                <2>  dw 0
   528 000008D0 0000                <2>  dw 0
   529 000008D2 1000                <2>  dw 0x10
   530 000008D4 00                  <2>  db 0
   531 000008D5 8E                  <2>  db 0x8E
   532 000008D6 0000                <2>  dw 0
   528 000008D8 0000                <2>  dw 0
   529 000008DA 1000                <2>  dw 0x10
   530 000008DC 00                  <2>  db 0
   531 000008DD 8E                  <2>  db 0x8E
   532 000008DE 0000                <2>  dw 0
   528 000008E0 0000                <2>  dw 0
   529 000008E2 1000                <2>  dw 0x10
   530 000008E4 00                  <2>  db 0
   531 000008E5 8E                  <2>  db 0x8E
   532 000008E6 0000                <2>  dw 0
   528 000008E8 0000                <2>  dw 0
   529 000008EA 1000                <2>  dw 0x10
   530 000008EC 00                  <2>  db 0
   531 000008ED 8E                  <2>  db 0x8E
   532 000008EE 0000                <2>  dw 0
   528 000008F0 0000                <2>  dw 0
   529 000008F2 1000                <2>  dw 0x10
   530 000008F4 00                  <2>  db 0
   531 000008F5 8E                  <2>  db 0x8E
   532 000008F6 0000                <2>  dw 0
   528 000008F8 0000                <2>  dw 0
   529 000008FA 1000                <2>  dw 0x10
   530 000008FC 00                  <2>  db 0
   531 000008FD 8E                  <2>  db 0x8E
   532 000008FE 0000                <2>  dw 0
   528 00000900 0000                <2>  dw 0
   529 00000902 1000                <2>  dw 0x10
   530 00000904 00                  <2>  db 0
   531 00000905 8E                  <2>  db 0x8E
   532 00000906 0000                <2>  dw 0
   528 00000908 0000                <2>  dw 0
   529 0000090A 1000                <2>  dw 0x10
   530 0000090C 00                  <2>  db 0
   531 0000090D 8E                  <2>  db 0x8E
   532 0000090E 0000                <2>  dw 0
   528 00000910 0000                <2>  dw 0
   529 00000912 1000                <2>  dw 0x10
   530 00000914 00                  <2>  db 0
   531 00000915 8E                  <2>  db 0x8E
   532 00000916 0000                <2>  dw 0
   528 00000918 0000                <2>  dw 0
   529 0000091A 1000                <2>  dw 0x10
   530 0000091C 00                  <2>  db 0
   531 0000091D 8E                  <2>  db 0x8E
   532 0000091E 0000                <2>  dw 0
   528 00000920 0000                <2>  dw 0
   529 00000922 1000                <2>  dw 0x10
   530 00000924 00                  <2>  db 0
   531 00000925 8E                  <2>  db 0x8E
   532 00000926 0000                <2>  dw 0
   528 00000928 0000                <2>  dw 0
   529 0000092A 1000                <2>  dw 0x10
   530 0000092C 00                  <2>  db 0
   531 0000092D 8E                  <2>  db 0x8E
   532 0000092E 0000                <2>  dw 0
   528 00000930 0000                <2>  dw 0
   529 00000932 1000                <2>  dw 0x10
   530 00000934 00                  <2>  db 0
   531 00000935 8E                  <2>  db 0x8E
   532 00000936 0000                <2>  dw 0
   528 00000938 0000                <2>  dw 0
   529 0000093A 1000                <2>  dw 0x10
   530 0000093C 00                  <2>  db 0
   531 0000093D 8E                  <2>  db 0x8E
   532 0000093E 0000                <2>  dw 0
   528 00000940 0000                <2>  dw 0
   529 00000942 1000                <2>  dw 0x10
   530 00000944 00                  <2>  db 0
   531 00000945 8E                  <2>  db 0x8E
   532 00000946 0000                <2>  dw 0
   528 00000948 0000                <2>  dw 0
   529 0000094A 1000                <2>  dw 0x10
   530 0000094C 00                  <2>  db 0
   531 0000094D 8E                  <2>  db 0x8E
   532 0000094E 0000                <2>  dw 0
   528 00000950 0000                <2>  dw 0
   529 00000952 1000                <2>  dw 0x10
   530 00000954 00                  <2>  db 0
   531 00000955 8E                  <2>  db 0x8E
   532 00000956 0000                <2>  dw 0
   528 00000958 0000                <2>  dw 0
   529 0000095A 1000                <2>  dw 0x10
   530 0000095C 00                  <2>  db 0
   531 0000095D 8E                  <2>  db 0x8E
   532 0000095E 0000                <2>  dw 0
   528 00000960 0000                <2>  dw 0
   529 00000962 1000                <2>  dw 0x10
   530 00000964 00                  <2>  db 0
   531 00000965 8E                  <2>  db 0x8E
   532 00000966 0000                <2>  dw 0
   528 00000968 0000                <2>  dw 0
   529 0000096A 1000                <2>  dw 0x10
   530 0000096C 00                  <2>  db 0
   531 0000096D 8E                  <2>  db 0x8E
   532 0000096E 0000                <2>  dw 0
   528 00000970 0000                <2>  dw 0
   529 00000972 1000                <2>  dw 0x10
   530 00000974 00                  <2>  db 0
   531 00000975 8E                  <2>  db 0x8E
   532 00000976 0000                <2>  dw 0
   528 00000978 0000                <2>  dw 0
   529 0000097A 1000                <2>  dw 0x10
   530 0000097C 00                  <2>  db 0
   531 0000097D 8E                  <2>  db 0x8E
   532 0000097E 0000                <2>  dw 0
   528 00000980 0000                <2>  dw 0
   529 00000982 1000                <2>  dw 0x10
   530 00000984 00                  <2>  db 0
   531 00000985 8E                  <2>  db 0x8E
   532 00000986 0000                <2>  dw 0
   534                              <1> ;
   535                              <1> ; Vector 29 (VMM Communication Exception)
   536                              <1> ;
   537 00000988 CDFC                <1>     dw      (ADDR_OF(SevEsIdtVmmComm) & 0xffff)  ; Offset low bits 15..0
   538 0000098A 1000                <1>     dw      0x10                                 ; Selector
   539 0000098C 00                  <1>     db      0                                    ; Reserved
   540 0000098D 8E                  <1>     db      0x8E                                 ; Gate Type (IA32_IDT_GATE_TYPE_INTERRUPT_32)
   541 0000098E FFFF                <1>     dw      (ADDR_OF(SevEsIdtVmmComm) >> 16)     ; Offset high bits 31..16
   542                              <1> ;
   543                              <1> ; Vectors 30 - 31 (No handlers)
   544                              <1> ;
   545                              <1> %rep 2
   546                              <1>     dw      0                                    ; Offset low bits 15..0
   547                              <1>     dw      0x10                                 ; Selector
   548                              <1>     db      0                                    ; Reserved
   549                              <1>     db      0x8E                                 ; Gate Type (IA32_IDT_GATE_TYPE_INTERRUPT_32)
   550                              <1>     dw      0                                    ; Offset high bits 31..16
   551                              <1> %endrep
   546 00000990 0000                <2>  dw 0
   547 00000992 1000                <2>  dw 0x10
   548 00000994 00                  <2>  db 0
   549 00000995 8E                  <2>  db 0x8E
   550 00000996 0000                <2>  dw 0
   546 00000998 0000                <2>  dw 0
   547 0000099A 1000                <2>  dw 0x10
   548 0000099C 00                  <2>  db 0
   549 0000099D 8E                  <2>  db 0x8E
   550 0000099E 0000                <2>  dw 0
   552                              <1> IDT_END:
   150                                  
   151                                  %include "Ia16/Real16ToFlat32.asm"
     1                              <1> ;------------------------------------------------------------------------------
     2                              <1> ; @file
     3                              <1> ; Transition from 16 bit real mode into 32 bit flat protected mode
     4                              <1> ;
     5                              <1> ; Copyright (c) 2008 - 2022, Intel Corporation. All rights reserved.<BR>
     6                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
     7                              <1> ;
     8                              <1> ;------------------------------------------------------------------------------
     9                              <1> 
    10                              <1> %define SEC_DEFAULT_CR0  0x00000023
    11                              <1> %define SEC_DEFAULT_CR4  0x640
    12                              <1> 
    13                              <1> BITS    16
    14                              <1> 
    15                              <1> ;
    16                              <1> ; Modified:  EAX, EBX
    17                              <1> ;
    18                              <1> ; @param[out]     DS       Selector allowing flat access to all addresses
    19                              <1> ; @param[out]     ES       Selector allowing flat access to all addresses
    20                              <1> ; @param[out]     FS       Selector allowing flat access to all addresses
    21                              <1> ; @param[out]     GS       Selector allowing flat access to all addresses
    22                              <1> ; @param[out]     SS       Selector allowing flat access to all addresses
    23                              <1> ;
    24                              <1> TransitionFromReal16To32BitFlat:
    25                              <1> 
    26                              <1>     debugShowPostCode POSTCODE_16BIT_MODE
    27                              <1> 
    28 000009A0 FA                  <1>     cli
    29                              <1> 
    30 000009A1 BB00F0              <1>     mov     bx, 0xf000
    31 000009A4 8EDB                <1>     mov     ds, bx
    32                              <1> 
    33 000009A6 BBC8FE              <1>     mov     bx, ADDR16_OF(gdtr)
    34                              <1> 
    35 000009A9 2E660F0117          <1> o32 lgdt    [cs:bx]
    36                              <1> 
    37 000009AE 66B823000000        <1>     mov     eax, SEC_DEFAULT_CR0
    38 000009B4 0F22C0              <1>     mov     cr0, eax
    39                              <1> 
    40 000009B7 66EAAFFEFFFF1000    <1>     jmp     LINEAR_CODE_SEL:dword ADDR_OF(jumpTo32BitAndLandHere)
    41                              <1> BITS    32
    42                              <1> jumpTo32BitAndLandHere:
    43                              <1> 
    44 000009BF B840060000          <1>     mov     eax, SEC_DEFAULT_CR4
    45 000009C4 0F22E0              <1>     mov     cr4, eax
    46                              <1> 
    47                              <1>     debugShowPostCode POSTCODE_32BIT_MODE
    48                              <1> 
    49 000009C7 66B81800            <1>     mov     ax, LINEAR_SEL
    50 000009CB 8ED8                <1>     mov     ds, ax
    51 000009CD 8EC0                <1>     mov     es, ax
    52 000009CF 8EE0                <1>     mov     fs, ax
    53 000009D1 8EE8                <1>     mov     gs, ax
    54 000009D3 8ED0                <1>     mov     ss, ax
    55                              <1> 
    56                              <1>     OneTimeCallRet TransitionFromReal16To32BitFlat
    19 000009D5 EB58                <2>  jmp %1 %+ OneTimerCallReturn
    57                              <1> 
    58 000009D7 90                  <1> ALIGN   2
    59                              <1> 
    60                              <1> gdtr:
    61 000009D8 3F00                <1>     dw      GDT_END - GDT_BASE - 1   ; GDT limit
    62 000009DA D0FEFFFF            <1>     dd      ADDR_OF(GDT_BASE)
    63                              <1> 
    64 000009DE 90<rep 2h>          <1> ALIGN   16
    65                              <1> 
    66                              <1> ;
    67                              <1> ; Macros for GDT entries
    68                              <1> ;
    69                              <1> 
    70                              <1> %define  PRESENT_FLAG(p) (p << 7)
    71                              <1> %define  DPL(dpl) (dpl << 5)
    72                              <1> %define  SYSTEM_FLAG(s) (s << 4)
    73                              <1> %define  DESC_TYPE(t) (t)
    74                              <1> 
    75                              <1> ; Type: data, expand-up, writable, accessed
    76                              <1> %define  DATA32_TYPE 3
    77                              <1> 
    78                              <1> ; Type: execute, readable, expand-up, accessed
    79                              <1> %define  CODE32_TYPE 0xb
    80                              <1> 
    81                              <1> ; Type: execute, readable, expand-up, accessed
    82                              <1> %define  CODE64_TYPE 0xb
    83                              <1> 
    84                              <1> %define  GRANULARITY_FLAG(g) (g << 7)
    85                              <1> %define  DEFAULT_SIZE32(d) (d << 6)
    86                              <1> %define  CODE64_FLAG(l) (l << 5)
    87                              <1> %define  UPPER_LIMIT(l) (l)
    88                              <1> 
    89                              <1> ;
    90                              <1> ; The Global Descriptor Table (GDT)
    91                              <1> ;
    92                              <1> 
    93                              <1> GDT_BASE:
    94                              <1> ; null descriptor
    95                              <1> NULL_SEL            equ $-GDT_BASE    ; Selector [0x0]
    96 000009E0 0000                <1>     DW      0            ; limit 15:0
    97 000009E2 0000                <1>     DW      0            ; base 15:0
    98 000009E4 00                  <1>     DB      0            ; base 23:16
    99 000009E5 00                  <1>     DB      0            ; sys flag, dpl, type
   100 000009E6 00                  <1>     DB      0            ; limit 19:16, flags
   101 000009E7 00                  <1>     DB      0            ; base 31:24
   102                              <1> 
   103                              <1> ; Spare segment descriptor
   104                              <1> SPARE1_SEL          equ $-GDT_BASE    ; Selector [0x8]
   105 000009E8 0000                <1>     DW      0            ; limit 15:0
   106 000009EA 0000                <1>     DW      0            ; base 15:0
   107 000009EC 00                  <1>     DB      0            ; base 23:16
   108 000009ED 00                  <1>     DB      0            ; sys flag, dpl, type
   109 000009EE 00                  <1>     DB      0            ; limit 19:16, flags
   110 000009EF 00                  <1>     DB      0            ; base 31:24
   111                              <1> 
   112                              <1> ; linear code segment descriptor
   113                              <1> LINEAR_CODE_SEL     equ $-GDT_BASE    ; Selector [0x10]
   114 000009F0 FFFF                <1>     DW      0xffff       ; limit 15:0
   115 000009F2 0000                <1>     DW      0            ; base 15:0
   116 000009F4 00                  <1>     DB      0            ; base 23:16
   117 000009F5 9B                  <1>     DB      PRESENT_FLAG(1)|DPL(0)|SYSTEM_FLAG(1)|DESC_TYPE(CODE32_TYPE)           ; 09Bh
   118 000009F6 CF                  <1>     DB      GRANULARITY_FLAG(1)|DEFAULT_SIZE32(1)|CODE64_FLAG(0)|UPPER_LIMIT(0xf)  ; 0CFh
   119 000009F7 00                  <1>     DB      0            ; base 31:24
   120                              <1> 
   121                              <1> ; linear data segment descriptor
   122                              <1> LINEAR_SEL          equ $-GDT_BASE    ; Selector [0x18]
   123 000009F8 FFFF                <1>     DW      0xffff       ; limit 15:0
   124 000009FA 0000                <1>     DW      0            ; base 15:0
   125 000009FC 00                  <1>     DB      0            ; base 23:16
   126 000009FD 93                  <1>     DB      PRESENT_FLAG(1)|DPL(0)|SYSTEM_FLAG(1)|DESC_TYPE(DATA32_TYPE)           ; 093h
   127 000009FE CF                  <1>     DB      GRANULARITY_FLAG(1)|DEFAULT_SIZE32(1)|CODE64_FLAG(0)|UPPER_LIMIT(0xf)  ; 0CFh
   128 000009FF 00                  <1>     DB      0            ; base 31:24
   129                              <1> 
   130                              <1> ; Spare segment descriptor
   131                              <1> SPARE2_SEL          equ $-GDT_BASE    ; Selector [0x20]
   132 00000A00 0000                <1>     DW      0            ; limit 15:0
   133 00000A02 0000                <1>     DW      0            ; base 15:0
   134 00000A04 00                  <1>     DB      0            ; base 23:16
   135 00000A05 00                  <1>     DB      0            ; sys flag, dpl, type
   136 00000A06 00                  <1>     DB      0            ; limit 19:16, flags
   137 00000A07 00                  <1>     DB      0            ; base 31:24
   138                              <1> 
   139                              <1> ; linear code (16-bit) segment descriptor
   140                              <1> LINEAR_CODE16_SEL   equ $-GDT_BASE    ; Selector [0x28]
   141 00000A08 FFFF                <1>     DW      0xffff       ; limit 15:0
   142 00000A0A 0000                <1>     DW      0            ; base 15:0
   143 00000A0C 00                  <1>     DB      0            ; base 23:16
   144 00000A0D 9B                  <1>     DB      PRESENT_FLAG(1)|DPL(0)|SYSTEM_FLAG(1)|DESC_TYPE(CODE32_TYPE)           ; 09Bh
   145 00000A0E 8F                  <1>     DB      GRANULARITY_FLAG(1)|DEFAULT_SIZE32(0)|CODE64_FLAG(0)|UPPER_LIMIT(0xf)  ; 08Fh
   146 00000A0F 00                  <1>     DB      0            ; base 31:24
   147                              <1> 
   148                              <1> ; linear data (16-bit) segment descriptor
   149                              <1> LINEAR_DATA16_SEL   equ $-GDT_BASE    ; Selector [0x30]
   150 00000A10 FFFF                <1>     DW      0xffff       ; limit 15:0
   151 00000A12 0000                <1>     DW      0            ; base 15:0
   152 00000A14 00                  <1>     DB      0            ; base 23:16
   153 00000A15 93                  <1>     DB      PRESENT_FLAG(1)|DPL(0)|SYSTEM_FLAG(1)|DESC_TYPE(DATA32_TYPE)           ; 093h
   154 00000A16 00                  <1>     DB      0
   155 00000A17 00                  <1>     DB      0            ; base 31:24
   156                              <1> 
   157                              <1> ; linear code (64-bit) segment descriptor
   158                              <1> LINEAR_CODE64_SEL   equ $-GDT_BASE    ; Selector [0x38]
   159 00000A18 FFFF                <1>     DW      0xffff       ; limit 15:0
   160 00000A1A 0000                <1>     DW      0            ; base 15:0
   161 00000A1C 00                  <1>     DB      0            ; base 23:16
   162 00000A1D 9B                  <1>     DB      PRESENT_FLAG(1)|DPL(0)|SYSTEM_FLAG(1)|DESC_TYPE(CODE64_TYPE)           ; 09Bh
   163 00000A1E AF                  <1>     DB      GRANULARITY_FLAG(1)|DEFAULT_SIZE32(0)|CODE64_FLAG(1)|UPPER_LIMIT(0xf)  ; 0AFh
   164 00000A1F 00                  <1>     DB      0            ; base 31:24
   165                              <1> 
   166                              <1> GDT_END:
   167                              <1> 
   152                                  %include "Ia16/Init16.asm"
     1                              <1> ;------------------------------------------------------------------------------
     2                              <1> ; @file
     3                              <1> ; 16-bit initialization code
     4                              <1> ;
     5                              <1> ; Copyright (c) 2008 - 2009, Intel Corporation. All rights reserved.<BR>
     6                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
     7                              <1> ;
     8                              <1> ;------------------------------------------------------------------------------
     9                              <1> 
    10                              <1> 
    11                              <1> BITS    16
    12                              <1> 
    13                              <1> ;
    14                              <1> ; @param[out] DI    'BP' to indicate boot-strap processor
    15                              <1> ;
    16                              <1> EarlyBspInitReal16:
    17 00000A20 BF4250              <1>     mov     di, 'BP'
    18 00000A23 EB05                <1>     jmp     short Main16
    19                              <1> 
    20                              <1> ;
    21                              <1> ; Modified:  EAX
    22                              <1> ;
    23                              <1> ; @param[in]  EAX   Initial value of the EAX register (BIST: Built-in Self Test)
    24                              <1> ; @param[out] ESP   Initial value of the EAX register (BIST: Built-in Self Test)
    25                              <1> ;
    26                              <1> EarlyInit16:
    27                              <1>     ;
    28                              <1>     ; ESP -  Initial value of the EAX register (BIST: Built-in Self Test)
    29                              <1>     ;
    30 00000A25 6689C4              <1>     mov     esp, eax
    31                              <1> 
    32                              <1>     debugInitialize
    13                              <2> 
    14                              <2> 
    15                              <2> 
    33                              <1> 
    34                              <1>     OneTimeCallRet EarlyInit16
    19 00000A28 EB02                <2>  jmp %1 %+ OneTimerCallReturn
    35                              <1> 
   153                                  
   154                                  %include "Main.asm"
     1                              <1> ;------------------------------------------------------------------------------
     2                              <1> ; @file
     3                              <1> ; Main routine of the pre-SEC code up through the jump into SEC
     4                              <1> ;
     5                              <1> ; Copyright (c) 2008 - 2009, Intel Corporation. All rights reserved.<BR>
     6                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
     7                              <1> ;
     8                              <1> ;------------------------------------------------------------------------------
     9                              <1> 
    10                              <1> 
    11                              <1> BITS    16
    12                              <1> 
    13                              <1> ;
    14                              <1> ; Modified:  EBX, ECX, EDX, EBP
    15                              <1> ;
    16                              <1> ; @param[in,out]  RAX/EAX  Initial value of the EAX register
    17                              <1> ;                          (BIST: Built-in Self Test)
    18                              <1> ; @param[in,out]  DI       'BP': boot-strap processor, or
    19                              <1> ;                          'AP': application processor
    20                              <1> ; @param[out]     RBP/EBP  Address of Boot Firmware Volume (BFV)
    21                              <1> ; @param[out]     DS       Selector allowing flat access to all addresses
    22                              <1> ; @param[out]     ES       Selector allowing flat access to all addresses
    23                              <1> ; @param[out]     FS       Selector allowing flat access to all addresses
    24                              <1> ; @param[out]     GS       Selector allowing flat access to all addresses
    25                              <1> ; @param[out]     SS       Selector allowing flat access to all addresses
    26                              <1> ;
    27                              <1> ; @return         None  This routine jumps to SEC and does not return
    28                              <1> ;
    29                              <1> Main16:
    30                              <1>     OneTimeCall EarlyInit16
    14 00000A2A EBF9                <2>  jmp %1
    15                              <2> %1 %+ OneTimerCallReturn:
    31                              <1> 
    32                              <1>     ;
    33                              <1>     ; Transition the processor from 16-bit real mode to 32-bit flat mode
    34                              <1>     ;
    35                              <1>     OneTimeCall TransitionFromReal16To32BitFlat
    14 00000A2C E971FF              <2>  jmp %1
    15                              <2> %1 %+ OneTimerCallReturn:
    36                              <1> 
    37                              <1> BITS    32
    38                              <1> 
    39                              <1>     ; Clear the WorkArea header. The SEV probe routines will populate the
    40                              <1>     ; work area when detected.
    41 00000A2F C60500B0800000      <1>     mov     byte[WORK_AREA_GUEST_TYPE], 0
    42                              <1> 
    43                              <1> %ifdef ARCH_X64
    44                              <1> 
    45 00000A36 EB05                <1>     jmp SearchBfv
    46                              <1> 
    47                              <1> ;
    48                              <1> ; Entry point of Main32
    49                              <1> ;
    50                              <1> Main32:
    51                              <1>     OneTimeCall InitTdx
    14 00000A38 E937FBFFFF          <2>  jmp %1
    15                              <2> %1 %+ OneTimerCallReturn:
    52                              <1> 
    53                              <1> SearchBfv:
    54                              <1> 
    55                              <1> %endif
    56                              <1> 
    57                              <1>     ;
    58                              <1>     ; Search for the Boot Firmware Volume (BFV)
    59                              <1>     ;
    60                              <1>     OneTimeCall Flat32SearchForBfvBase
    14 00000A3D E9BEF5FFFF          <2>  jmp %1
    15                              <2> %1 %+ OneTimerCallReturn:
    61                              <1> 
    62                              <1>     ;
    63                              <1>     ; EBP - Start of BFV
    64                              <1>     ;
    65                              <1> 
    66                              <1>     ;
    67                              <1>     ; Search for the SEC entry point
    68                              <1>     ;
    69                              <1>     OneTimeCall Flat32SearchForSecEntryPoint
    14 00000A42 E930F6FFFF          <2>  jmp %1
    15                              <2> %1 %+ OneTimerCallReturn:
    70                              <1> 
    71                              <1>     ;
    72                              <1>     ; ESI - SEC Core entry point
    73                              <1>     ; EBP - Start of BFV
    74                              <1>     ;
    75                              <1> 
    76                              <1> %ifdef ARCH_IA32
    77                              <1> 
    78                              <1>     ;
    79                              <1>     ; SEV support can be built and run using the Ia32/X64 split environment.
    80                              <1>     ; Set the OVMF/SEV work area as appropriate.
    81                              <1>     ;
    82                              <1>     OneTimeCall CheckSevFeatures
    83                              <1> 
    84                              <1>     ;
    85                              <1>     ; Restore initial EAX value into the EAX register
    86                              <1>     ;
    87                              <1>     mov     eax, esp
    88                              <1> 
    89                              <1>     ;
    90                              <1>     ; Jump to the 32-bit SEC entry point
    91                              <1>     ;
    92                              <1>     jmp     esi
    93                              <1> 
    94                              <1> %else
    95                              <1> 
    96                              <1>     ;
    97                              <1>     ; Transition the processor from 32-bit flat mode to 64-bit flat mode
    98                              <1>     ;
    99                              <1>     OneTimeCall Transition32FlatTo64Flat
    14 00000A47 E9D4F7FFFF          <2>  jmp %1
    15                              <2> %1 %+ OneTimerCallReturn:
   100                              <1> 
   101                              <1> BITS    64
   102                              <1> 
   103                              <1>     ;
   104                              <1>     ; Some values were calculated in 32-bit mode.  Make sure the upper
   105                              <1>     ; 32-bits of 64-bit registers are zero for these values.
   106                              <1>     ;
   107 00000A4C B8FFFFFFFF          <1>     mov     rax, 0x00000000ffffffff
   108 00000A51 4821C6              <1>     and     rsi, rax
   109 00000A54 4821C5              <1>     and     rbp, rax
   110 00000A57 4821C4              <1>     and     rsp, rax
   111                              <1> 
   112                              <1>     ;
   113                              <1>     ; RSI - SEC Core entry point
   114                              <1>     ; RBP - Start of BFV
   115                              <1>     ;
   116                              <1> 
   117                              <1>     ;
   118                              <1>     ; Restore initial EAX value into the RAX register
   119                              <1>     ;
   120 00000A5A 4889E0              <1>     mov     rax, rsp
   121                              <1> 
   122                              <1>     ;
   123                              <1>     ; Jump to the 64-bit SEC entry point
   124                              <1>     ;
   125 00000A5D FFE6                <1>     jmp     rsi
   126                              <1> 
   127                              <1> %endif
   155                                  
   156                                    %define SEV_ES_AP_RESET_IP  8433668
   157                                    %define SEV_LAUNCH_SECRET_BASE  00h
   158                                    %define SEV_LAUNCH_SECRET_SIZE  00h
   159                                    %define SEV_FW_HASH_BLOCK_BASE  00h
   160                                    %define SEV_FW_HASH_BLOCK_SIZE  00h
   161                                  %include "Ia16/ResetVectorVtf0.asm"
     1                              <1> ;------------------------------------------------------------------------------
     2                              <1> ; @file
     3                              <1> ; First code executed by processor after resetting.
     4                              <1> ; Derived from UefiCpuPkg/ResetVector/Vtf0/Ia16/ResetVectorVtf0.asm
     5                              <1> ;
     6                              <1> ; Copyright (c) 2008 - 2014, Intel Corporation. All rights reserved.<BR>
     7                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
     8                              <1> ;
     9                              <1> ;------------------------------------------------------------------------------
    10                              <1> 
    11                              <1> BITS    16
    12                              <1> 
    13 00000A5F 90                  <1> ALIGN   16
    14                              <1> 
    15                              <1> ;
    16                              <1> ; Pad the image size to 4k when page tables are in VTF0
    17                              <1> ;
    18                              <1> ; If the VTF0 image has page tables built in, then we need to make
    19                              <1> ; sure the end of VTF0 is 4k above where the page tables end.
    20                              <1> ;
    21                              <1> ; This is required so the page tables will be 4k aligned when VTF0 is
    22                              <1> ; located just below 0x100000000 (4GB) in the firmware device.
    23                              <1> ;
    24                              <1> %ifdef ALIGN_TOP_TO_4K_FOR_PAGING
    25                              <1>     TIMES (0x1000 - ($ - EndOfPageTables) - 0x20) DB 0
    26                              <1> %endif
    27                              <1> 
    28                              <1> ;
    29                              <1> ; Padding to ensure first guid starts at 0xffffffd0
    30                              <1> ;
    31 00000A60 00<rep 8h>          <1> TIMES (15 - ((guidedStructureEnd - guidedStructureStart + 15) % 16)) DB 0
    32                              <1> 
    33                              <1> ; GUIDed structure.  To traverse this you should first verify the
    34                              <1> ; presence of the table footer guid
    35                              <1> ; (96b582de-1fb2-45f7-baea-a366c55a082d) at 0xffffffd0.  If that
    36                              <1> ; is found, the two bytes at 0xffffffce are the entire table length.
    37                              <1> ;
    38                              <1> ; The table is composed of structures with the form:
    39                              <1> ;
    40                              <1> ; Data (arbitrary bytes identified by guid)
    41                              <1> ; length from start of data to end of guid (2 bytes)
    42                              <1> ; guid (16 bytes)
    43                              <1> ;
    44                              <1> ; so work back from the footer using the length to traverse until you
    45                              <1> ; either find the guid you're looking for or run off the beginning of
    46                              <1> ; the table.
    47                              <1> ;
    48                              <1> guidedStructureStart:
    49                              <1> 
    50                              <1> %ifdef ARCH_X64
    51                              <1> ;
    52                              <1> ; TDX Metadata offset block
    53                              <1> ;
    54                              <1> ; TdxMetadata.asm is included in ARCH_X64 because Inte TDX is only
    55                              <1> ; available in ARCH_X64. Below block describes the offset of
    56                              <1> ; TdxMetadata block in Ovmf image
    57                              <1> ;
    58                              <1> ; GUID : e47a6535-984a-4798-865e-4685a7bf8ec2
    59                              <1> ;
    60                              <1> tdxMetadataOffsetStart:
    61 00000A68 C0090000            <1>     DD      fourGigabytes - TdxMetadataGuid - 16
    62 00000A6C 1600                <1>     DW      tdxMetadataOffsetEnd - tdxMetadataOffsetStart
    63 00000A6E 35657AE44A989847    <1>     DB      0x35, 0x65, 0x7a, 0xe4, 0x4a, 0x98, 0x98, 0x47
    64 00000A76 865E4685A7BF8EC2    <1>     DB      0x86, 0x5e, 0x46, 0x85, 0xa7, 0xbf, 0x8e, 0xc2
    65                              <1> tdxMetadataOffsetEnd:
    66                              <1> 
    67                              <1> ;
    68                              <1> ; SEV metadata descriptor
    69                              <1> ;
    70                              <1> ; Provide the start offset of the metadata blob within the OVMF binary.
    71                              <1> 
    72                              <1> ; GUID : dc886566-984a-4798-A75e-5585a7bf67cc
    73                              <1> ;
    74                              <1> OvmfSevMetadataOffsetStart:
    75 00000A7E 48050000            <1>   DD      (fourGigabytes - OvmfSevMetadataGuid)
    76 00000A82 1600                <1>   DW      OvmfSevMetadataOffsetEnd - OvmfSevMetadataOffsetStart
    77 00000A84 666588DC4A989847    <1>   DB      0x66, 0x65, 0x88, 0xdc, 0x4a, 0x98, 0x98, 0x47
    78 00000A8C A75E5585A7BF67CC    <1>   DB      0xA7, 0x5e, 0x55, 0x85, 0xa7, 0xbf, 0x67, 0xcc
    79                              <1> OvmfSevMetadataOffsetEnd:
    80                              <1> 
    81                              <1> %endif
    82                              <1> 
    83                              <1> ; SEV Hash Table Block
    84                              <1> ;
    85                              <1> ; This describes the guest ram area where the hypervisor should
    86                              <1> ; install a table describing the hashes of certain firmware configuration
    87                              <1> ; device files that would otherwise be passed in unchecked.  The current
    88                              <1> ; use is for the kernel, initrd and command line values, but others may be
    89                              <1> ; added.  The data format is:
    90                              <1> ;
    91                              <1> ; base physical address (32 bit word)
    92                              <1> ; table length (32 bit word)
    93                              <1> ;
    94                              <1> ; GUID (SEV FW config hash block): 7255371f-3a3b-4b04-927b-1da6efa8d454
    95                              <1> ;
    96                              <1> sevFwHashBlockStart:
    97 00000A94 00000000            <1>     DD      SEV_FW_HASH_BLOCK_BASE
    98 00000A98 00000000            <1>     DD      SEV_FW_HASH_BLOCK_SIZE
    99 00000A9C 1A00                <1>     DW      sevFwHashBlockEnd - sevFwHashBlockStart
   100 00000A9E 1F3755723B3A044B    <1>     DB      0x1f, 0x37, 0x55, 0x72, 0x3b, 0x3a, 0x04, 0x4b
   101 00000AA6 927B1DA6EFA8D454    <1>     DB      0x92, 0x7b, 0x1d, 0xa6, 0xef, 0xa8, 0xd4, 0x54
   102                              <1> sevFwHashBlockEnd:
   103                              <1> 
   104                              <1> ; SEV Secret block
   105                              <1> ;
   106                              <1> ; This describes the guest ram area where the hypervisor should
   107                              <1> ; inject the secret.  The data format is:
   108                              <1> ;
   109                              <1> ; base physical address (32 bit word)
   110                              <1> ; table length (32 bit word)
   111                              <1> ;
   112                              <1> ; GUID (SEV secret block): 4c2eb361-7d9b-4cc3-8081-127c90d3d294
   113                              <1> ;
   114                              <1> sevSecretBlockStart:
   115 00000AAE 00000000            <1>     DD      SEV_LAUNCH_SECRET_BASE
   116 00000AB2 00000000            <1>     DD      SEV_LAUNCH_SECRET_SIZE
   117 00000AB6 1A00                <1>     DW      sevSecretBlockEnd - sevSecretBlockStart
   118 00000AB8 61B32E4C9B7DC34C    <1>     DB      0x61, 0xB3, 0x2E, 0x4C, 0x9B, 0x7D, 0xC3, 0x4C
   119 00000AC0 8081127C90D3D294    <1>     DB      0x80, 0x81, 0x12, 0x7C, 0x90, 0xD3, 0xD2, 0x94
   120                              <1> sevSecretBlockEnd:
   121                              <1> 
   122                              <1> ;
   123                              <1> ; SEV-ES Processor Reset support
   124                              <1> ;
   125                              <1> ; sevEsResetBlock:
   126                              <1> ;   For the initial boot of an AP under SEV-ES, the "reset" RIP must be
   127                              <1> ;   programmed to the RAM area defined by SEV_ES_AP_RESET_IP. The data
   128                              <1> ;   format is:
   129                              <1> ;
   130                              <1> ;   IP value [0:15]
   131                              <1> ;   CS segment base [31:16]
   132                              <1> ;
   133                              <1> ;   GUID (SEV-ES reset block): 00f771de-1a7e-4fcb-890e-68c77e2fb44e
   134                              <1> ;
   135                              <1> ;   A hypervisor reads the CS segement base and IP value. The CS segment base
   136                              <1> ;   value represents the high order 16-bits of the CS segment base, so the
   137                              <1> ;   hypervisor must left shift the value of the CS segement base by 16 bits to
   138                              <1> ;   form the full CS segment base for the CS segment register. It would then
   139                              <1> ;   program the EIP register with the IP value as read.
   140                              <1> ;
   141                              <1> 
   142                              <1> sevEsResetBlockStart:
   143 00000AC8 04B08000            <1>     DD      SEV_ES_AP_RESET_IP
   144 00000ACC 1600                <1>     DW      sevEsResetBlockEnd - sevEsResetBlockStart
   145 00000ACE DE71F7007E1ACB4F    <1>     DB      0xDE, 0x71, 0xF7, 0x00, 0x7E, 0x1A, 0xCB, 0x4F
   146 00000AD6 890E68C77E2FB44E    <1>     DB      0x89, 0x0E, 0x68, 0xC7, 0x7E, 0x2F, 0xB4, 0x4E
   147                              <1> sevEsResetBlockEnd:
   148                              <1> 
   149                              <1> ;
   150                              <1> ; Table footer:
   151                              <1> ;
   152                              <1> ; length of whole table (16 bit word)
   153                              <1> ; GUID (table footer): 96b582de-1fb2-45f7-baea-a366c55a082d
   154                              <1> ;
   155 00000ADE 8800                <1>     DW      guidedStructureEnd - guidedStructureStart
   156 00000AE0 DE82B596B21FF745    <1>     DB      0xDE, 0x82, 0xB5, 0x96, 0xB2, 0x1F, 0xF7, 0x45
   157 00000AE8 BAEAA366C55A082D    <1>     DB      0xBA, 0xEA, 0xA3, 0x66, 0xC5, 0x5A, 0x08, 0x2D
   158                              <1> 
   159                              <1> guidedStructureEnd:
   160                              <1> 
   161                              <1> ALIGN   16
   162                              <1> 
   163                              <1> ;
   164                              <1> ; 0xffffffe0
   165                              <1> ;
   166 00000AF0 000000000000000000- <1>     DD      0, 0, 0
   166 00000AF9 000000              <1>
   167                              <1> 
   168                              <1> ;
   169                              <1> ; The VTF signature (0xffffffec)
   170                              <1> ;
   171                              <1> ; VTF-0 means that the VTF (Volume Top File) code does not require
   172                              <1> ; any fixups.
   173                              <1> ;
   174                              <1> vtfSignature:
   175 00000AFC 56544600            <1>     DB      'V', 'T', 'F', 0
   176                              <1> 
   177                              <1> ALIGN   16
   178                              <1> 
   179                              <1> resetVector:
   180                              <1> ;
   181                              <1> ; Reset Vector
   182                              <1> ;
   183                              <1> ; This is where the processor will begin execution
   184                              <1> ;
   185                              <1> ; In IA32 we follow the standard reset vector flow. While in X64, Td guest
   186                              <1> ; may be supported. Td guest requires the startup mode to be 32-bit
   187                              <1> ; protected mode but the legacy VM startup mode is 16-bit real mode.
   188                              <1> ; To make NASM generate such shared entry code that behaves correctly in
   189                              <1> ; both 16-bit and 32-bit mode, more BITS directives are added.
   190                              <1> ;
   191                              <1> %ifdef ARCH_IA32
   192                              <1>     nop
   193                              <1>     nop
   194                              <1>     jmp     EarlyBspInitReal16
   195                              <1> 
   196                              <1> %else
   197                              <1> 
   198 00000B00 0F20C0              <1>     mov     eax, cr0
   199 00000B03 A801                <1>     test    al, 1
   200 00000B05 7405                <1>     jz      .Real
   201                              <1> BITS 32
   202 00000B07 E92CFFFFFF          <1>     jmp     Main32
   203                              <1> BITS 16
   204                              <1> .Real:
   205 00000B0C E911FF              <1>     jmp     EarlyBspInitReal16
   206                              <1> 
   207                              <1> %endif
   208                              <1> 
   209 00000B0F 90                  <1> ALIGN   16
   210                              <1> 
   211                              <1> fourGigabytes:
   212                              <1> 
   162                                  
