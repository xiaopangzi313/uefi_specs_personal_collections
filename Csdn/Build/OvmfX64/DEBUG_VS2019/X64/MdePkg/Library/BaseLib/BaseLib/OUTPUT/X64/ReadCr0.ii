#line 1 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Library\\BaseLib\\X64\\ReadCr0.nasm"
#line 1 "d:\\uefi_specs_personal_collections\\csdn\\Build\\OvmfX64\\DEBUG_VS2019\\X64\\MdePkg\\Library\\BaseLib\\BaseLib\\DEBUG\\AutoGen.h"















#line 1 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"




















#line 1 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"




















  #pragma pack()
#line 23 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"


























#line 50 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"











  #pragma warning ( disable : 4214 )




  #pragma warning ( disable : 4100 )





  #pragma warning ( disable : 4057 )




  #pragma warning ( disable : 4127 )




  #pragma warning ( disable : 4505 )




  #pragma warning ( disable : 4206 )

  





    #pragma warning ( disable : 4701 )





    #pragma warning ( disable : 4703 )

  #line 104 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"

#line 106 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"









typedef unsigned __int64 UINT64;



typedef __int64 INT64;



typedef unsigned __int32 UINT32;



typedef __int32 INT32;



typedef unsigned short UINT16;




typedef unsigned short CHAR16;



typedef short INT16;




typedef unsigned char BOOLEAN;



typedef unsigned char UINT8;



typedef char CHAR8;



typedef signed char INT8;















































#line 206 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"





typedef UINT64 UINTN;




typedef INT64 INTN;












































































#line 294 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"







#line 302 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"















#line 318 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"

#line 320 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\X64\\ProcessorBind.h"
#line 22 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"





  #pragma warning ( disable : 4200 )
#line 29 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"













#line 43 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"






#line 50 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"






  













#line 71 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"

  





  #line 79 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"
#line 80 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"







  






#line 95 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"






  






#line 109 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"
#line 110 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"






  









  





  #line 133 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"
#line 134 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"








  









  





  #line 159 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"
#line 160 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"






  





#line 173 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"





  #line 179 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"
#line 180 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"

























#line 206 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"







typedef struct {
  UINT32    Data1;
  UINT16    Data2;
  UINT16    Data3;
  UINT8     Data4[8];
} GUID;




typedef struct {
  UINT8    Addr[4];
} IPv4_ADDRESS;




typedef struct {
  UINT8    Addr[16];
} IPv6_ADDRESS;




typedef UINT64 PHYSICAL_ADDRESS;




typedef struct _LIST_ENTRY LIST_ENTRY;




struct _LIST_ENTRY {
  LIST_ENTRY    *ForwardLink;
  LIST_ENTRY    *BackLink;
};



































































#line 319 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"

#line 321 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"
















































































































































































































































































#line 594 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"












































#line 639 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"




typedef CHAR8 *VA_LIST;






























































#line 707 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"




typedef UINTN *BASE_LIST;











































#line 756 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"



#line 760 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"













#line 774 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"



















#line 794 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"















#line 810 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"






static_assert (sizeof (BOOLEAN) == 1, "sizeof (BOOLEAN) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (INT8)    == 1, "sizeof (INT8) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (UINT8)   == 1, "sizeof (UINT8) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (INT16)   == 2, "sizeof (INT16) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (UINT16)  == 2, "sizeof (UINT16) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (INT32)   == 4, "sizeof (INT32) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (UINT32)  == 4, "sizeof (UINT32) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (INT64)   == 8, "sizeof (INT64) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (UINT64)  == 8, "sizeof (UINT64) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (CHAR8)   == 1, "sizeof (CHAR8) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (CHAR16)  == 2, "sizeof (CHAR16) does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (L'A')    == 2, "sizeof (L'A') does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (L"A")    == 4, "sizeof (L\"A\") does not meet UEFI Specification Data Type requirements");

static_assert (_Alignof (BOOLEAN) == sizeof (BOOLEAN), "Alignment of BOOLEAN does not meet UEFI Specification Data Type requirements");
static_assert (_Alignof (INT8)    == sizeof (INT8), "Alignment of INT8 does not meet UEFI Specification Data Type requirements");
static_assert (_Alignof (UINT8)   == sizeof (UINT8), "Alignment of INT16 does not meet UEFI Specification Data Type requirements");
static_assert (_Alignof (INT16)   == sizeof (INT16), "Alignment of INT16 does not meet UEFI Specification Data Type requirements");
static_assert (_Alignof (UINT16)  == sizeof (UINT16), "Alignment of UINT16 does not meet UEFI Specification Data Type requirements");
static_assert (_Alignof (INT32)   == sizeof (INT32), "Alignment of INT32 does not meet UEFI Specification Data Type requirements");
static_assert (_Alignof (UINT32)  == sizeof (UINT32), "Alignment of UINT32 does not meet UEFI Specification Data Type requirements");
static_assert (_Alignof (INT64)   == sizeof (INT64), "Alignment of INT64 does not meet UEFI Specification Data Type requirements");
static_assert (_Alignof (UINT64)  == sizeof (UINT64), "Alignment of UINT64 does not meet UEFI Specification Data Type requirements");
static_assert (_Alignof (CHAR8)   == sizeof (CHAR8), "Alignment of CHAR8 does not meet UEFI Specification Data Type requirements");
static_assert (_Alignof (CHAR16)  == sizeof (CHAR16), "Alignment of CHAR16 does not meet UEFI Specification Data Type requirements");
static_assert (_Alignof (INTN)    == sizeof (INTN), "Alignment of INTN does not meet UEFI Specification Data Type requirements");
static_assert (_Alignof (UINTN)   == sizeof (UINTN), "Alignment of UINTN does not meet UEFI Specification Data Type requirements");
static_assert (_Alignof (void *)  == sizeof (void *), "Alignment of VOID * does not meet UEFI Specification Data Type requirements");








typedef enum {
  __VerifyUint8EnumValue = 0xff
} __VERIFY_UINT8_ENUM_SIZE;

typedef enum {
  __VerifyUint16EnumValue = 0xffff
} __VERIFY_UINT16_ENUM_SIZE;

typedef enum {
  __VerifyInt32EnumValue = 0x7fffffff
} __VERIFY_INT32_ENUM_SIZE;

static_assert (sizeof (__VERIFY_UINT8_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (__VERIFY_UINT16_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");
static_assert (sizeof (__VERIFY_INT32_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");

static_assert (_Alignof (__VERIFY_UINT8_ENUM_SIZE)  == sizeof (__VERIFY_UINT8_ENUM_SIZE), "Alignment of enum does not meet UEFI Specification Data Type requirements");
static_assert (_Alignof (__VERIFY_UINT16_ENUM_SIZE) == sizeof (__VERIFY_UINT16_ENUM_SIZE), "Alignment of enum does not meet UEFI Specification Data Type requirements");
static_assert (_Alignof (__VERIFY_INT32_ENUM_SIZE) == sizeof (__VERIFY_INT32_ENUM_SIZE), "Alignment of enum does not meet UEFI Specification Data Type requirements");



























































































































































typedef UINTN RETURN_STATUS;




















































































































































































































































































































void *
_ReturnAddress (
  void
  );

  #pragma intrinsic(_ReturnAddress)







































#line 1381 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"














#line 1396 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Base.h"
#line 17 "d:\\uefi_specs_personal_collections\\csdn\\Build\\OvmfX64\\DEBUG_VS2019\\X64\\MdePkg\\Library\\BaseLib\\BaseLib\\DEBUG\\AutoGen.h"
#line 1 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Library/PcdLib.h"








































































































































































































































































































































































































































































































































































































































































































































































































































UINTN
__cdecl
LibPcdSetSku (
   UINTN  SkuId
  );











UINT8
__cdecl
LibPcdGet8 (
   UINTN  TokenNumber
  );











UINT16
__cdecl
LibPcdGet16 (
   UINTN  TokenNumber
  );











UINT32
__cdecl
LibPcdGet32 (
   UINTN  TokenNumber
  );











UINT64
__cdecl
LibPcdGet64 (
   UINTN  TokenNumber
  );











void *
__cdecl
LibPcdGetPtr (
   UINTN  TokenNumber
  );











BOOLEAN
__cdecl
LibPcdGetBool (
   UINTN  TokenNumber
  );









UINTN
__cdecl
LibPcdGetSize (
   UINTN  TokenNumber
  );















UINT8
__cdecl
LibPcdGetEx8 (
   const GUID  *Guid,
   UINTN       TokenNumber
  );















UINT16
__cdecl
LibPcdGetEx16 (
   const GUID  *Guid,
   UINTN       TokenNumber
  );












UINT32
__cdecl
LibPcdGetEx32 (
   const GUID  *Guid,
   UINTN       TokenNumber
  );















UINT64
__cdecl
LibPcdGetEx64 (
   const GUID  *Guid,
   UINTN       TokenNumber
  );















void *
__cdecl
LibPcdGetExPtr (
   const GUID  *Guid,
   UINTN       TokenNumber
  );















BOOLEAN
__cdecl
LibPcdGetExBool (
   const GUID  *Guid,
   UINTN       TokenNumber
  );















UINTN
__cdecl
LibPcdGetExSize (
   const GUID  *Guid,
   UINTN       TokenNumber
  );













RETURN_STATUS
__cdecl
LibPcdSet8S (
   UINTN  TokenNumber,
   UINT8  Value
  );













RETURN_STATUS
__cdecl
LibPcdSet16S (
   UINTN   TokenNumber,
   UINT16  Value
  );













RETURN_STATUS
__cdecl
LibPcdSet32S (
   UINTN   TokenNumber,
   UINT32  Value
  );













RETURN_STATUS
__cdecl
LibPcdSet64S (
   UINTN   TokenNumber,
   UINT64  Value
  );























RETURN_STATUS
__cdecl
LibPcdSetPtrS (
         UINTN  TokenNumber,
      UINTN  *SizeOfBuffer,
   const void   *Buffer
  );













RETURN_STATUS
__cdecl
LibPcdSetBoolS (
   UINTN    TokenNumber,
   BOOLEAN  Value
  );

















RETURN_STATUS
__cdecl
LibPcdSetEx8S (
   const GUID  *Guid,
   UINTN       TokenNumber,
   UINT8       Value
  );

















RETURN_STATUS
__cdecl
LibPcdSetEx16S (
   const GUID  *Guid,
   UINTN       TokenNumber,
   UINT16      Value
  );

















RETURN_STATUS
__cdecl
LibPcdSetEx32S (
   const GUID  *Guid,
   UINTN       TokenNumber,
   UINT32      Value
  );

















RETURN_STATUS
__cdecl
LibPcdSetEx64S (
   const GUID  *Guid,
   UINTN       TokenNumber,
   UINT64      Value
  );























RETURN_STATUS
__cdecl
LibPcdSetExPtrS (
   const GUID   *Guid,
         UINTN  TokenNumber,
      UINTN  *SizeOfBuffer,
         void   *Buffer
  );

















RETURN_STATUS
__cdecl
LibPcdSetExBoolS (
   const GUID  *Guid,
   UINTN       TokenNumber,
   BOOLEAN     Value
  );

















typedef
void
(__cdecl *PCD_CALLBACK)(
          const GUID        *CallBackGuid  ,
          UINTN             CallBackToken,
       void              *TokenData,
          UINTN             TokenDataSize
  );

















void
__cdecl
LibPcdCallbackOnSet (
   const GUID    *Guid        ,
   UINTN         TokenNumber,
   PCD_CALLBACK  NotificationFunction
  );














void
__cdecl
LibPcdCancelCallback (
   const GUID    *Guid        ,
   UINTN         TokenNumber,
   PCD_CALLBACK  NotificationFunction
  );




















UINTN
__cdecl
LibPcdGetNextToken (
   const GUID  *Guid        ,
   UINTN       TokenNumber
  );














GUID *
__cdecl
LibPcdGetNextTokenSpace (
   const GUID  *TokenSpaceGuid
  );
























void *
__cdecl
LibPatchPcdSetPtr (
          void  *PatchVariable,
          UINTN  MaximumDatumSize,
       UINTN  *SizeOfBuffer,
   const  void   *Buffer
  );
























RETURN_STATUS
__cdecl
LibPatchPcdSetPtrS (
        void   *PatchVariable,
         UINTN  MaximumDatumSize,
      UINTN  *SizeOfBuffer,
   const void   *Buffer
  );


























void *
__cdecl
LibPatchPcdSetPtrAndSize (
         void   *PatchVariable,
         UINTN  *SizeOfPatchVariable,
          UINTN  MaximumDatumSize,
       UINTN  *SizeOfBuffer,
   const  void   *Buffer
  );


























RETURN_STATUS
__cdecl
LibPatchPcdSetPtrAndSizeS (
        void   *PatchVariable,
        UINTN  *SizeOfPatchVariable,
         UINTN  MaximumDatumSize,
      UINTN  *SizeOfBuffer,
   const void   *Buffer
  );

typedef enum {
  PCD_TYPE_8,
  PCD_TYPE_16,
  PCD_TYPE_32,
  PCD_TYPE_64,
  PCD_TYPE_BOOL,
  PCD_TYPE_PTR
} PCD_TYPE;

typedef struct {
  
  
  
  
  PCD_TYPE    PcdType;
  
  
  
  
  UINTN       PcdSize;
  
  
  
  
  
  
  CHAR8       *PcdName;
} PCD_INFO;













void
__cdecl
LibPcdGetInfo (
          UINTN     TokenNumber,
         PCD_INFO  *PcdInfo
  );














void
__cdecl
LibPcdGetInfoEx (
   const  GUID      *Guid,
          UINTN     TokenNumber,
         PCD_INFO  *PcdInfo
  );








UINTN
__cdecl
LibPcdGetSku (
  void
  );

#line 1677 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Include\\Library/PcdLib.h"
#line 18 "d:\\uefi_specs_personal_collections\\csdn\\Build\\OvmfX64\\DEBUG_VS2019\\X64\\MdePkg\\Library\\BaseLib\\BaseLib\\DEBUG\\AutoGen.h"

extern GUID  gEfiCallerIdGuid;
extern GUID  gEdkiiDscPlatformGuid;
extern CHAR8 *gEfiCallerBaseName;



extern GUID gEfiMdePkgTokenSpaceGuid;


extern UINT64 _gPcd_SkuId_Array[];



extern const BOOLEAN _gPcd_FixedAtBuild_PcdVerifyNodeInList;



extern const UINT32 _gPcd_FixedAtBuild_PcdMaximumLinkedListLength;






extern const UINT32 _gPcd_FixedAtBuild_PcdMaximumAsciiStringLength;






extern const UINT32 _gPcd_FixedAtBuild_PcdMaximumUnicodeStringLength;






extern const UINT32 _gPcd_FixedAtBuild_PcdControlFlowEnforcementPropertyMask;






extern const UINT8 _gPcd_FixedAtBuild_PcdSpeculationBarrierType;











#line 77 "d:\\uefi_specs_personal_collections\\csdn\\Build\\OvmfX64\\DEBUG_VS2019\\X64\\MdePkg\\Library\\BaseLib\\BaseLib\\DEBUG\\AutoGen.h"
#line 1 "D:\\uefi_specs_personal_collections\\edk2\\MdePkg\\Library\\BaseLib\\X64\\ReadCr0.nasm"
;------------------------------------------------------------------------------
;
; Copyright (c) 2006, Intel Corporation. All rights reserved.<BR>
; SPDX-License-Identifier: BSD-2-Clause-Patent
;
; Module Name:
;
;   ReadCr0.Asm
;
; Abstract:
;
;   AsmReadCr0 function
;
; Notes:
;
;------------------------------------------------------------------------------

    DEFAULT REL
    SECTION .text

;------------------------------------------------------------------------------
; UINTN
; __cdecl
; AsmReadCr0 (
;   void
;   );
;------------------------------------------------------------------------------
global AsmReadCr0
AsmReadCr0:
    mov     rax, cr0
    ret

